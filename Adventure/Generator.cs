

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "App.config"
//     Connection String Name: "adventure"
//     Connection String:      "Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=AdventureWorks2016;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Express Edition (64-bit)
// Database Engine Edition : Express
// Database Version        : 13.0.4001.0

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace ComplexObjects.Adventure
{
    using System.Linq;

    #region Unit of work

    public interface IAdventureDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<AWBuildVersion> AWBuildVersions { get; set; } // AWBuildVersion
        System.Data.Entity.DbSet<DatabaseLog> DatabaseLogs { get; set; } // DatabaseLog
        System.Data.Entity.DbSet<ErrorLog> ErrorLogs { get; set; } // ErrorLog
        System.Data.Entity.DbSet<HumanResources_Department> HumanResources_Departments { get; set; } // Department
        System.Data.Entity.DbSet<HumanResources_Employee> HumanResources_Employees { get; set; } // Employee
        System.Data.Entity.DbSet<HumanResources_EmployeeDepartmentHistory> HumanResources_EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory
        System.Data.Entity.DbSet<HumanResources_EmployeePayHistory> HumanResources_EmployeePayHistories { get; set; } // EmployeePayHistory
        System.Data.Entity.DbSet<HumanResources_JobCandidate> HumanResources_JobCandidates { get; set; } // JobCandidate
        System.Data.Entity.DbSet<HumanResources_Shift> HumanResources_Shifts { get; set; } // Shift
        System.Data.Entity.DbSet<Person_Address> Person_Addresses { get; set; } // Address
        System.Data.Entity.DbSet<Person_AddressType> Person_AddressTypes { get; set; } // AddressType
        System.Data.Entity.DbSet<Person_BusinessEntity> Person_BusinessEntities { get; set; } // BusinessEntity
        System.Data.Entity.DbSet<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; } // BusinessEntityAddress
        System.Data.Entity.DbSet<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; } // BusinessEntityContact
        System.Data.Entity.DbSet<Person_ContactType> Person_ContactTypes { get; set; } // ContactType
        System.Data.Entity.DbSet<Person_CountryRegion> Person_CountryRegions { get; set; } // CountryRegion
        System.Data.Entity.DbSet<Person_EmailAddress> Person_EmailAddresses { get; set; } // EmailAddress
        System.Data.Entity.DbSet<Person_Password> Person_Passwords { get; set; } // Password
        System.Data.Entity.DbSet<Person_Person> Person_People { get; set; } // Person
        System.Data.Entity.DbSet<Person_PersonPhone> Person_PersonPhones { get; set; } // PersonPhone
        System.Data.Entity.DbSet<Person_PhoneNumberType> Person_PhoneNumberTypes { get; set; } // PhoneNumberType
        System.Data.Entity.DbSet<Person_StateProvince> Person_StateProvinces { get; set; } // StateProvince
        System.Data.Entity.DbSet<Production_BillOfMaterial> Production_BillOfMaterials { get; set; } // BillOfMaterials
        System.Data.Entity.DbSet<Production_Culture> Production_Cultures { get; set; } // Culture
        System.Data.Entity.DbSet<Production_Document> Production_Documents { get; set; } // Document
        System.Data.Entity.DbSet<Production_Illustration> Production_Illustrations { get; set; } // Illustration
        System.Data.Entity.DbSet<Production_Location> Production_Locations { get; set; } // Location
        System.Data.Entity.DbSet<Production_Product> Production_Products { get; set; } // Product
        System.Data.Entity.DbSet<Production_ProductCategory> Production_ProductCategories { get; set; } // ProductCategory
        System.Data.Entity.DbSet<Production_ProductCostHistory> Production_ProductCostHistories { get; set; } // ProductCostHistory
        System.Data.Entity.DbSet<Production_ProductDescription> Production_ProductDescriptions { get; set; } // ProductDescription
        System.Data.Entity.DbSet<Production_ProductDocument> Production_ProductDocuments { get; set; } // ProductDocument
        System.Data.Entity.DbSet<Production_ProductInventory> Production_ProductInventories { get; set; } // ProductInventory
        System.Data.Entity.DbSet<Production_ProductListPriceHistory> Production_ProductListPriceHistories { get; set; } // ProductListPriceHistory
        System.Data.Entity.DbSet<Production_ProductModel> Production_ProductModels { get; set; } // ProductModel
        System.Data.Entity.DbSet<Production_ProductModelIllustration> Production_ProductModelIllustrations { get; set; } // ProductModelIllustration
        System.Data.Entity.DbSet<Production_ProductModelProductDescriptionCulture> Production_ProductModelProductDescriptionCultures { get; set; } // ProductModelProductDescriptionCulture
        System.Data.Entity.DbSet<Production_ProductPhoto> Production_ProductPhotoes { get; set; } // ProductPhoto
        System.Data.Entity.DbSet<Production_ProductProductPhoto> Production_ProductProductPhotoes { get; set; } // ProductProductPhoto
        System.Data.Entity.DbSet<Production_ProductReview> Production_ProductReviews { get; set; } // ProductReview
        System.Data.Entity.DbSet<Production_ProductSubcategory> Production_ProductSubcategories { get; set; } // ProductSubcategory
        System.Data.Entity.DbSet<Production_ScrapReason> Production_ScrapReasons { get; set; } // ScrapReason
        System.Data.Entity.DbSet<Production_TransactionHistory> Production_TransactionHistories { get; set; } // TransactionHistory
        System.Data.Entity.DbSet<Production_TransactionHistoryArchive> Production_TransactionHistoryArchives { get; set; } // TransactionHistoryArchive
        System.Data.Entity.DbSet<Production_UnitMeasure> Production_UnitMeasures { get; set; } // UnitMeasure
        System.Data.Entity.DbSet<Production_WorkOrder> Production_WorkOrders { get; set; } // WorkOrder
        System.Data.Entity.DbSet<Production_WorkOrderRouting> Production_WorkOrderRoutings { get; set; } // WorkOrderRouting
        System.Data.Entity.DbSet<Purchasing_ProductVendor> Purchasing_ProductVendors { get; set; } // ProductVendor
        System.Data.Entity.DbSet<Purchasing_PurchaseOrderDetail> Purchasing_PurchaseOrderDetails { get; set; } // PurchaseOrderDetail
        System.Data.Entity.DbSet<Purchasing_PurchaseOrderHeader> Purchasing_PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader
        System.Data.Entity.DbSet<Purchasing_ShipMethod> Purchasing_ShipMethods { get; set; } // ShipMethod
        System.Data.Entity.DbSet<Purchasing_Vendor> Purchasing_Vendors { get; set; } // Vendor
        System.Data.Entity.DbSet<Sales_CountryRegionCurrency> Sales_CountryRegionCurrencies { get; set; } // CountryRegionCurrency
        System.Data.Entity.DbSet<Sales_CreditCard> Sales_CreditCards { get; set; } // CreditCard
        System.Data.Entity.DbSet<Sales_Currency> Sales_Currencies { get; set; } // Currency
        System.Data.Entity.DbSet<Sales_CurrencyRate> Sales_CurrencyRates { get; set; } // CurrencyRate
        System.Data.Entity.DbSet<Sales_Customer> Sales_Customers { get; set; } // Customer
        System.Data.Entity.DbSet<Sales_PersonCreditCard> Sales_PersonCreditCards { get; set; } // PersonCreditCard
        System.Data.Entity.DbSet<Sales_SalesOrderDetail> Sales_SalesOrderDetails { get; set; } // SalesOrderDetail
        System.Data.Entity.DbSet<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader
        System.Data.Entity.DbSet<Sales_SalesOrderHeaderSalesReason> Sales_SalesOrderHeaderSalesReasons { get; set; } // SalesOrderHeaderSalesReason
        System.Data.Entity.DbSet<Sales_SalesPerson> Sales_SalesPersons { get; set; } // SalesPerson
        System.Data.Entity.DbSet<Sales_SalesPersonQuotaHistory> Sales_SalesPersonQuotaHistories { get; set; } // SalesPersonQuotaHistory
        System.Data.Entity.DbSet<Sales_SalesReason> Sales_SalesReasons { get; set; } // SalesReason
        System.Data.Entity.DbSet<Sales_SalesTaxRate> Sales_SalesTaxRates { get; set; } // SalesTaxRate
        System.Data.Entity.DbSet<Sales_SalesTerritory> Sales_SalesTerritories { get; set; } // SalesTerritory
        System.Data.Entity.DbSet<Sales_SalesTerritoryHistory> Sales_SalesTerritoryHistories { get; set; } // SalesTerritoryHistory
        System.Data.Entity.DbSet<Sales_ShoppingCartItem> Sales_ShoppingCartItems { get; set; } // ShoppingCartItem
        System.Data.Entity.DbSet<Sales_SpecialOffer> Sales_SpecialOffers { get; set; } // SpecialOffer
        System.Data.Entity.DbSet<Sales_SpecialOfferProduct> Sales_SpecialOfferProducts { get; set; } // SpecialOfferProduct
        System.Data.Entity.DbSet<Sales_Store> Sales_Stores { get; set; } // Store

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class AdventureDbContext : System.Data.Entity.DbContext, IAdventureDbContext
    {
        public System.Data.Entity.DbSet<AWBuildVersion> AWBuildVersions { get; set; } // AWBuildVersion
        public System.Data.Entity.DbSet<DatabaseLog> DatabaseLogs { get; set; } // DatabaseLog
        public System.Data.Entity.DbSet<ErrorLog> ErrorLogs { get; set; } // ErrorLog
        public System.Data.Entity.DbSet<HumanResources_Department> HumanResources_Departments { get; set; } // Department
        public System.Data.Entity.DbSet<HumanResources_Employee> HumanResources_Employees { get; set; } // Employee
        public System.Data.Entity.DbSet<HumanResources_EmployeeDepartmentHistory> HumanResources_EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory
        public System.Data.Entity.DbSet<HumanResources_EmployeePayHistory> HumanResources_EmployeePayHistories { get; set; } // EmployeePayHistory
        public System.Data.Entity.DbSet<HumanResources_JobCandidate> HumanResources_JobCandidates { get; set; } // JobCandidate
        public System.Data.Entity.DbSet<HumanResources_Shift> HumanResources_Shifts { get; set; } // Shift
        public System.Data.Entity.DbSet<Person_Address> Person_Addresses { get; set; } // Address
        public System.Data.Entity.DbSet<Person_AddressType> Person_AddressTypes { get; set; } // AddressType
        public System.Data.Entity.DbSet<Person_BusinessEntity> Person_BusinessEntities { get; set; } // BusinessEntity
        public System.Data.Entity.DbSet<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; } // BusinessEntityAddress
        public System.Data.Entity.DbSet<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; } // BusinessEntityContact
        public System.Data.Entity.DbSet<Person_ContactType> Person_ContactTypes { get; set; } // ContactType
        public System.Data.Entity.DbSet<Person_CountryRegion> Person_CountryRegions { get; set; } // CountryRegion
        public System.Data.Entity.DbSet<Person_EmailAddress> Person_EmailAddresses { get; set; } // EmailAddress
        public System.Data.Entity.DbSet<Person_Password> Person_Passwords { get; set; } // Password
        public System.Data.Entity.DbSet<Person_Person> Person_People { get; set; } // Person
        public System.Data.Entity.DbSet<Person_PersonPhone> Person_PersonPhones { get; set; } // PersonPhone
        public System.Data.Entity.DbSet<Person_PhoneNumberType> Person_PhoneNumberTypes { get; set; } // PhoneNumberType
        public System.Data.Entity.DbSet<Person_StateProvince> Person_StateProvinces { get; set; } // StateProvince
        public System.Data.Entity.DbSet<Production_BillOfMaterial> Production_BillOfMaterials { get; set; } // BillOfMaterials
        public System.Data.Entity.DbSet<Production_Culture> Production_Cultures { get; set; } // Culture
        public System.Data.Entity.DbSet<Production_Document> Production_Documents { get; set; } // Document
        public System.Data.Entity.DbSet<Production_Illustration> Production_Illustrations { get; set; } // Illustration
        public System.Data.Entity.DbSet<Production_Location> Production_Locations { get; set; } // Location
        public System.Data.Entity.DbSet<Production_Product> Production_Products { get; set; } // Product
        public System.Data.Entity.DbSet<Production_ProductCategory> Production_ProductCategories { get; set; } // ProductCategory
        public System.Data.Entity.DbSet<Production_ProductCostHistory> Production_ProductCostHistories { get; set; } // ProductCostHistory
        public System.Data.Entity.DbSet<Production_ProductDescription> Production_ProductDescriptions { get; set; } // ProductDescription
        public System.Data.Entity.DbSet<Production_ProductDocument> Production_ProductDocuments { get; set; } // ProductDocument
        public System.Data.Entity.DbSet<Production_ProductInventory> Production_ProductInventories { get; set; } // ProductInventory
        public System.Data.Entity.DbSet<Production_ProductListPriceHistory> Production_ProductListPriceHistories { get; set; } // ProductListPriceHistory
        public System.Data.Entity.DbSet<Production_ProductModel> Production_ProductModels { get; set; } // ProductModel
        public System.Data.Entity.DbSet<Production_ProductModelIllustration> Production_ProductModelIllustrations { get; set; } // ProductModelIllustration
        public System.Data.Entity.DbSet<Production_ProductModelProductDescriptionCulture> Production_ProductModelProductDescriptionCultures { get; set; } // ProductModelProductDescriptionCulture
        public System.Data.Entity.DbSet<Production_ProductPhoto> Production_ProductPhotoes { get; set; } // ProductPhoto
        public System.Data.Entity.DbSet<Production_ProductProductPhoto> Production_ProductProductPhotoes { get; set; } // ProductProductPhoto
        public System.Data.Entity.DbSet<Production_ProductReview> Production_ProductReviews { get; set; } // ProductReview
        public System.Data.Entity.DbSet<Production_ProductSubcategory> Production_ProductSubcategories { get; set; } // ProductSubcategory
        public System.Data.Entity.DbSet<Production_ScrapReason> Production_ScrapReasons { get; set; } // ScrapReason
        public System.Data.Entity.DbSet<Production_TransactionHistory> Production_TransactionHistories { get; set; } // TransactionHistory
        public System.Data.Entity.DbSet<Production_TransactionHistoryArchive> Production_TransactionHistoryArchives { get; set; } // TransactionHistoryArchive
        public System.Data.Entity.DbSet<Production_UnitMeasure> Production_UnitMeasures { get; set; } // UnitMeasure
        public System.Data.Entity.DbSet<Production_WorkOrder> Production_WorkOrders { get; set; } // WorkOrder
        public System.Data.Entity.DbSet<Production_WorkOrderRouting> Production_WorkOrderRoutings { get; set; } // WorkOrderRouting
        public System.Data.Entity.DbSet<Purchasing_ProductVendor> Purchasing_ProductVendors { get; set; } // ProductVendor
        public System.Data.Entity.DbSet<Purchasing_PurchaseOrderDetail> Purchasing_PurchaseOrderDetails { get; set; } // PurchaseOrderDetail
        public System.Data.Entity.DbSet<Purchasing_PurchaseOrderHeader> Purchasing_PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader
        public System.Data.Entity.DbSet<Purchasing_ShipMethod> Purchasing_ShipMethods { get; set; } // ShipMethod
        public System.Data.Entity.DbSet<Purchasing_Vendor> Purchasing_Vendors { get; set; } // Vendor
        public System.Data.Entity.DbSet<Sales_CountryRegionCurrency> Sales_CountryRegionCurrencies { get; set; } // CountryRegionCurrency
        public System.Data.Entity.DbSet<Sales_CreditCard> Sales_CreditCards { get; set; } // CreditCard
        public System.Data.Entity.DbSet<Sales_Currency> Sales_Currencies { get; set; } // Currency
        public System.Data.Entity.DbSet<Sales_CurrencyRate> Sales_CurrencyRates { get; set; } // CurrencyRate
        public System.Data.Entity.DbSet<Sales_Customer> Sales_Customers { get; set; } // Customer
        public System.Data.Entity.DbSet<Sales_PersonCreditCard> Sales_PersonCreditCards { get; set; } // PersonCreditCard
        public System.Data.Entity.DbSet<Sales_SalesOrderDetail> Sales_SalesOrderDetails { get; set; } // SalesOrderDetail
        public System.Data.Entity.DbSet<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader
        public System.Data.Entity.DbSet<Sales_SalesOrderHeaderSalesReason> Sales_SalesOrderHeaderSalesReasons { get; set; } // SalesOrderHeaderSalesReason
        public System.Data.Entity.DbSet<Sales_SalesPerson> Sales_SalesPersons { get; set; } // SalesPerson
        public System.Data.Entity.DbSet<Sales_SalesPersonQuotaHistory> Sales_SalesPersonQuotaHistories { get; set; } // SalesPersonQuotaHistory
        public System.Data.Entity.DbSet<Sales_SalesReason> Sales_SalesReasons { get; set; } // SalesReason
        public System.Data.Entity.DbSet<Sales_SalesTaxRate> Sales_SalesTaxRates { get; set; } // SalesTaxRate
        public System.Data.Entity.DbSet<Sales_SalesTerritory> Sales_SalesTerritories { get; set; } // SalesTerritory
        public System.Data.Entity.DbSet<Sales_SalesTerritoryHistory> Sales_SalesTerritoryHistories { get; set; } // SalesTerritoryHistory
        public System.Data.Entity.DbSet<Sales_ShoppingCartItem> Sales_ShoppingCartItems { get; set; } // ShoppingCartItem
        public System.Data.Entity.DbSet<Sales_SpecialOffer> Sales_SpecialOffers { get; set; } // SpecialOffer
        public System.Data.Entity.DbSet<Sales_SpecialOfferProduct> Sales_SpecialOfferProducts { get; set; } // SpecialOfferProduct
        public System.Data.Entity.DbSet<Sales_Store> Sales_Stores { get; set; } // Store

        static AdventureDbContext()
        {
            System.Data.Entity.Database.SetInitializer<AdventureDbContext>(null);
        }

        public AdventureDbContext()
            : base("Name=adventure")
        {
        }

        public AdventureDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public AdventureDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public AdventureDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public AdventureDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        public AdventureDbContext(System.Data.Entity.Core.Objects.ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AWBuildVersionConfiguration());
            modelBuilder.Configurations.Add(new DatabaseLogConfiguration());
            modelBuilder.Configurations.Add(new ErrorLogConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_DepartmentConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_EmployeeConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_EmployeeDepartmentHistoryConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_EmployeePayHistoryConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_JobCandidateConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_ShiftConfiguration());
            modelBuilder.Configurations.Add(new Person_AddressConfiguration());
            modelBuilder.Configurations.Add(new Person_AddressTypeConfiguration());
            modelBuilder.Configurations.Add(new Person_BusinessEntityConfiguration());
            modelBuilder.Configurations.Add(new Person_BusinessEntityAddressConfiguration());
            modelBuilder.Configurations.Add(new Person_BusinessEntityContactConfiguration());
            modelBuilder.Configurations.Add(new Person_ContactTypeConfiguration());
            modelBuilder.Configurations.Add(new Person_CountryRegionConfiguration());
            modelBuilder.Configurations.Add(new Person_EmailAddressConfiguration());
            modelBuilder.Configurations.Add(new Person_PasswordConfiguration());
            modelBuilder.Configurations.Add(new Person_PersonConfiguration());
            modelBuilder.Configurations.Add(new Person_PersonPhoneConfiguration());
            modelBuilder.Configurations.Add(new Person_PhoneNumberTypeConfiguration());
            modelBuilder.Configurations.Add(new Person_StateProvinceConfiguration());
            modelBuilder.Configurations.Add(new Production_BillOfMaterialConfiguration());
            modelBuilder.Configurations.Add(new Production_CultureConfiguration());
            modelBuilder.Configurations.Add(new Production_DocumentConfiguration());
            modelBuilder.Configurations.Add(new Production_IllustrationConfiguration());
            modelBuilder.Configurations.Add(new Production_LocationConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductCategoryConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductCostHistoryConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductDescriptionConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductDocumentConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductInventoryConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductListPriceHistoryConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductModelConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductModelIllustrationConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductModelProductDescriptionCultureConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductPhotoConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductProductPhotoConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductReviewConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductSubcategoryConfiguration());
            modelBuilder.Configurations.Add(new Production_ScrapReasonConfiguration());
            modelBuilder.Configurations.Add(new Production_TransactionHistoryConfiguration());
            modelBuilder.Configurations.Add(new Production_TransactionHistoryArchiveConfiguration());
            modelBuilder.Configurations.Add(new Production_UnitMeasureConfiguration());
            modelBuilder.Configurations.Add(new Production_WorkOrderConfiguration());
            modelBuilder.Configurations.Add(new Production_WorkOrderRoutingConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_ProductVendorConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_PurchaseOrderDetailConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_PurchaseOrderHeaderConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_ShipMethodConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_VendorConfiguration());
            modelBuilder.Configurations.Add(new Sales_CountryRegionCurrencyConfiguration());
            modelBuilder.Configurations.Add(new Sales_CreditCardConfiguration());
            modelBuilder.Configurations.Add(new Sales_CurrencyConfiguration());
            modelBuilder.Configurations.Add(new Sales_CurrencyRateConfiguration());
            modelBuilder.Configurations.Add(new Sales_CustomerConfiguration());
            modelBuilder.Configurations.Add(new Sales_PersonCreditCardConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesOrderDetailConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesOrderHeaderConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesOrderHeaderSalesReasonConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesPersonConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesPersonQuotaHistoryConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesReasonConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesTaxRateConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesTerritoryConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesTerritoryHistoryConfiguration());
            modelBuilder.Configurations.Add(new Sales_ShoppingCartItemConfiguration());
            modelBuilder.Configurations.Add(new Sales_SpecialOfferConfiguration());
            modelBuilder.Configurations.Add(new Sales_SpecialOfferProductConfiguration());
            modelBuilder.Configurations.Add(new Sales_StoreConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AWBuildVersionConfiguration(schema));
            modelBuilder.Configurations.Add(new DatabaseLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ErrorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_DepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_EmployeeConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_EmployeeDepartmentHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_EmployeePayHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_JobCandidateConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_ShiftConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_AddressConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_AddressTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_BusinessEntityConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_BusinessEntityAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_BusinessEntityContactConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_ContactTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_CountryRegionConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_EmailAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_PasswordConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_PersonConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_PersonPhoneConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_PhoneNumberTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_StateProvinceConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_BillOfMaterialConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_CultureConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_DocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_IllustrationConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_LocationConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductCostHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductInventoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductListPriceHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductModelConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductModelIllustrationConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductModelProductDescriptionCultureConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductPhotoConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductProductPhotoConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductReviewConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductSubcategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ScrapReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_TransactionHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_TransactionHistoryArchiveConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_UnitMeasureConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_WorkOrderConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_WorkOrderRoutingConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_ProductVendorConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_PurchaseOrderDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_PurchaseOrderHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_ShipMethodConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_VendorConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_CountryRegionCurrencyConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_CreditCardConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_CurrencyConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_CurrencyRateConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_CustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_PersonCreditCardConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesOrderDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesOrderHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesOrderHeaderSalesReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesPersonConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesPersonQuotaHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesTaxRateConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesTerritoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesTerritoryHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_ShoppingCartItemConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SpecialOfferConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SpecialOfferProductConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_StoreConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class AdventureDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<AdventureDbContext>
    {
        public AdventureDbContext Create()
        {
            return new AdventureDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class FakeAdventureDbContext : IAdventureDbContext
    {
        public System.Data.Entity.DbSet<AWBuildVersion> AWBuildVersions { get; set; }
        public System.Data.Entity.DbSet<DatabaseLog> DatabaseLogs { get; set; }
        public System.Data.Entity.DbSet<ErrorLog> ErrorLogs { get; set; }
        public System.Data.Entity.DbSet<HumanResources_Department> HumanResources_Departments { get; set; }
        public System.Data.Entity.DbSet<HumanResources_Employee> HumanResources_Employees { get; set; }
        public System.Data.Entity.DbSet<HumanResources_EmployeeDepartmentHistory> HumanResources_EmployeeDepartmentHistories { get; set; }
        public System.Data.Entity.DbSet<HumanResources_EmployeePayHistory> HumanResources_EmployeePayHistories { get; set; }
        public System.Data.Entity.DbSet<HumanResources_JobCandidate> HumanResources_JobCandidates { get; set; }
        public System.Data.Entity.DbSet<HumanResources_Shift> HumanResources_Shifts { get; set; }
        public System.Data.Entity.DbSet<Person_Address> Person_Addresses { get; set; }
        public System.Data.Entity.DbSet<Person_AddressType> Person_AddressTypes { get; set; }
        public System.Data.Entity.DbSet<Person_BusinessEntity> Person_BusinessEntities { get; set; }
        public System.Data.Entity.DbSet<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; }
        public System.Data.Entity.DbSet<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; }
        public System.Data.Entity.DbSet<Person_ContactType> Person_ContactTypes { get; set; }
        public System.Data.Entity.DbSet<Person_CountryRegion> Person_CountryRegions { get; set; }
        public System.Data.Entity.DbSet<Person_EmailAddress> Person_EmailAddresses { get; set; }
        public System.Data.Entity.DbSet<Person_Password> Person_Passwords { get; set; }
        public System.Data.Entity.DbSet<Person_Person> Person_People { get; set; }
        public System.Data.Entity.DbSet<Person_PersonPhone> Person_PersonPhones { get; set; }
        public System.Data.Entity.DbSet<Person_PhoneNumberType> Person_PhoneNumberTypes { get; set; }
        public System.Data.Entity.DbSet<Person_StateProvince> Person_StateProvinces { get; set; }
        public System.Data.Entity.DbSet<Production_BillOfMaterial> Production_BillOfMaterials { get; set; }
        public System.Data.Entity.DbSet<Production_Culture> Production_Cultures { get; set; }
        public System.Data.Entity.DbSet<Production_Document> Production_Documents { get; set; }
        public System.Data.Entity.DbSet<Production_Illustration> Production_Illustrations { get; set; }
        public System.Data.Entity.DbSet<Production_Location> Production_Locations { get; set; }
        public System.Data.Entity.DbSet<Production_Product> Production_Products { get; set; }
        public System.Data.Entity.DbSet<Production_ProductCategory> Production_ProductCategories { get; set; }
        public System.Data.Entity.DbSet<Production_ProductCostHistory> Production_ProductCostHistories { get; set; }
        public System.Data.Entity.DbSet<Production_ProductDescription> Production_ProductDescriptions { get; set; }
        public System.Data.Entity.DbSet<Production_ProductDocument> Production_ProductDocuments { get; set; }
        public System.Data.Entity.DbSet<Production_ProductInventory> Production_ProductInventories { get; set; }
        public System.Data.Entity.DbSet<Production_ProductListPriceHistory> Production_ProductListPriceHistories { get; set; }
        public System.Data.Entity.DbSet<Production_ProductModel> Production_ProductModels { get; set; }
        public System.Data.Entity.DbSet<Production_ProductModelIllustration> Production_ProductModelIllustrations { get; set; }
        public System.Data.Entity.DbSet<Production_ProductModelProductDescriptionCulture> Production_ProductModelProductDescriptionCultures { get; set; }
        public System.Data.Entity.DbSet<Production_ProductPhoto> Production_ProductPhotoes { get; set; }
        public System.Data.Entity.DbSet<Production_ProductProductPhoto> Production_ProductProductPhotoes { get; set; }
        public System.Data.Entity.DbSet<Production_ProductReview> Production_ProductReviews { get; set; }
        public System.Data.Entity.DbSet<Production_ProductSubcategory> Production_ProductSubcategories { get; set; }
        public System.Data.Entity.DbSet<Production_ScrapReason> Production_ScrapReasons { get; set; }
        public System.Data.Entity.DbSet<Production_TransactionHistory> Production_TransactionHistories { get; set; }
        public System.Data.Entity.DbSet<Production_TransactionHistoryArchive> Production_TransactionHistoryArchives { get; set; }
        public System.Data.Entity.DbSet<Production_UnitMeasure> Production_UnitMeasures { get; set; }
        public System.Data.Entity.DbSet<Production_WorkOrder> Production_WorkOrders { get; set; }
        public System.Data.Entity.DbSet<Production_WorkOrderRouting> Production_WorkOrderRoutings { get; set; }
        public System.Data.Entity.DbSet<Purchasing_ProductVendor> Purchasing_ProductVendors { get; set; }
        public System.Data.Entity.DbSet<Purchasing_PurchaseOrderDetail> Purchasing_PurchaseOrderDetails { get; set; }
        public System.Data.Entity.DbSet<Purchasing_PurchaseOrderHeader> Purchasing_PurchaseOrderHeaders { get; set; }
        public System.Data.Entity.DbSet<Purchasing_ShipMethod> Purchasing_ShipMethods { get; set; }
        public System.Data.Entity.DbSet<Purchasing_Vendor> Purchasing_Vendors { get; set; }
        public System.Data.Entity.DbSet<Sales_CountryRegionCurrency> Sales_CountryRegionCurrencies { get; set; }
        public System.Data.Entity.DbSet<Sales_CreditCard> Sales_CreditCards { get; set; }
        public System.Data.Entity.DbSet<Sales_Currency> Sales_Currencies { get; set; }
        public System.Data.Entity.DbSet<Sales_CurrencyRate> Sales_CurrencyRates { get; set; }
        public System.Data.Entity.DbSet<Sales_Customer> Sales_Customers { get; set; }
        public System.Data.Entity.DbSet<Sales_PersonCreditCard> Sales_PersonCreditCards { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesOrderDetail> Sales_SalesOrderDetails { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesOrderHeaderSalesReason> Sales_SalesOrderHeaderSalesReasons { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesPerson> Sales_SalesPersons { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesPersonQuotaHistory> Sales_SalesPersonQuotaHistories { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesReason> Sales_SalesReasons { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesTaxRate> Sales_SalesTaxRates { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesTerritory> Sales_SalesTerritories { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesTerritoryHistory> Sales_SalesTerritoryHistories { get; set; }
        public System.Data.Entity.DbSet<Sales_ShoppingCartItem> Sales_ShoppingCartItems { get; set; }
        public System.Data.Entity.DbSet<Sales_SpecialOffer> Sales_SpecialOffers { get; set; }
        public System.Data.Entity.DbSet<Sales_SpecialOfferProduct> Sales_SpecialOfferProducts { get; set; }
        public System.Data.Entity.DbSet<Sales_Store> Sales_Stores { get; set; }

        public FakeAdventureDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            AWBuildVersions = new FakeDbSet<AWBuildVersion>("SystemInformationID");
            DatabaseLogs = new FakeDbSet<DatabaseLog>("DatabaseLogID");
            ErrorLogs = new FakeDbSet<ErrorLog>("ErrorLogID");
            HumanResources_Departments = new FakeDbSet<HumanResources_Department>("DepartmentID");
            HumanResources_Employees = new FakeDbSet<HumanResources_Employee>("BusinessEntityID");
            HumanResources_EmployeeDepartmentHistories = new FakeDbSet<HumanResources_EmployeeDepartmentHistory>("BusinessEntityID", "StartDate", "DepartmentID", "ShiftID");
            HumanResources_EmployeePayHistories = new FakeDbSet<HumanResources_EmployeePayHistory>("BusinessEntityID", "RateChangeDate");
            HumanResources_JobCandidates = new FakeDbSet<HumanResources_JobCandidate>("JobCandidateID");
            HumanResources_Shifts = new FakeDbSet<HumanResources_Shift>("ShiftID");
            Person_Addresses = new FakeDbSet<Person_Address>("AddressID");
            Person_AddressTypes = new FakeDbSet<Person_AddressType>("AddressTypeID");
            Person_BusinessEntities = new FakeDbSet<Person_BusinessEntity>("BusinessEntityID");
            Person_BusinessEntityAddresses = new FakeDbSet<Person_BusinessEntityAddress>("BusinessEntityID", "AddressID", "AddressTypeID");
            Person_BusinessEntityContacts = new FakeDbSet<Person_BusinessEntityContact>("BusinessEntityID", "PersonID", "ContactTypeID");
            Person_ContactTypes = new FakeDbSet<Person_ContactType>("ContactTypeID");
            Person_CountryRegions = new FakeDbSet<Person_CountryRegion>("CountryRegionCode");
            Person_EmailAddresses = new FakeDbSet<Person_EmailAddress>("BusinessEntityID", "EmailAddressID");
            Person_Passwords = new FakeDbSet<Person_Password>("BusinessEntityID");
            Person_People = new FakeDbSet<Person_Person>("BusinessEntityID");
            Person_PersonPhones = new FakeDbSet<Person_PersonPhone>("BusinessEntityID", "PhoneNumber", "PhoneNumberTypeID");
            Person_PhoneNumberTypes = new FakeDbSet<Person_PhoneNumberType>("PhoneNumberTypeID");
            Person_StateProvinces = new FakeDbSet<Person_StateProvince>("StateProvinceID");
            Production_BillOfMaterials = new FakeDbSet<Production_BillOfMaterial>("BillOfMaterialsID");
            Production_Cultures = new FakeDbSet<Production_Culture>("CultureID");
            Production_Documents = new FakeDbSet<Production_Document>("DocumentNode");
            Production_Illustrations = new FakeDbSet<Production_Illustration>("IllustrationID");
            Production_Locations = new FakeDbSet<Production_Location>("LocationID");
            Production_Products = new FakeDbSet<Production_Product>("ProductID");
            Production_ProductCategories = new FakeDbSet<Production_ProductCategory>("ProductCategoryID");
            Production_ProductCostHistories = new FakeDbSet<Production_ProductCostHistory>("ProductID", "StartDate");
            Production_ProductDescriptions = new FakeDbSet<Production_ProductDescription>("ProductDescriptionID");
            Production_ProductDocuments = new FakeDbSet<Production_ProductDocument>("ProductID", "DocumentNode");
            Production_ProductInventories = new FakeDbSet<Production_ProductInventory>("ProductID", "LocationID");
            Production_ProductListPriceHistories = new FakeDbSet<Production_ProductListPriceHistory>("ProductID", "StartDate");
            Production_ProductModels = new FakeDbSet<Production_ProductModel>("ProductModelID");
            Production_ProductModelIllustrations = new FakeDbSet<Production_ProductModelIllustration>("ProductModelID", "IllustrationID");
            Production_ProductModelProductDescriptionCultures = new FakeDbSet<Production_ProductModelProductDescriptionCulture>("ProductModelID", "ProductDescriptionID", "CultureID");
            Production_ProductPhotoes = new FakeDbSet<Production_ProductPhoto>("ProductPhotoID");
            Production_ProductProductPhotoes = new FakeDbSet<Production_ProductProductPhoto>("ProductID", "ProductPhotoID");
            Production_ProductReviews = new FakeDbSet<Production_ProductReview>("ProductReviewID");
            Production_ProductSubcategories = new FakeDbSet<Production_ProductSubcategory>("ProductSubcategoryID");
            Production_ScrapReasons = new FakeDbSet<Production_ScrapReason>("ScrapReasonID");
            Production_TransactionHistories = new FakeDbSet<Production_TransactionHistory>("TransactionID");
            Production_TransactionHistoryArchives = new FakeDbSet<Production_TransactionHistoryArchive>("TransactionID");
            Production_UnitMeasures = new FakeDbSet<Production_UnitMeasure>("UnitMeasureCode");
            Production_WorkOrders = new FakeDbSet<Production_WorkOrder>("WorkOrderID");
            Production_WorkOrderRoutings = new FakeDbSet<Production_WorkOrderRouting>("WorkOrderID", "ProductID", "OperationSequence");
            Purchasing_ProductVendors = new FakeDbSet<Purchasing_ProductVendor>("ProductID", "BusinessEntityID");
            Purchasing_PurchaseOrderDetails = new FakeDbSet<Purchasing_PurchaseOrderDetail>("PurchaseOrderID", "PurchaseOrderDetailID");
            Purchasing_PurchaseOrderHeaders = new FakeDbSet<Purchasing_PurchaseOrderHeader>("PurchaseOrderID");
            Purchasing_ShipMethods = new FakeDbSet<Purchasing_ShipMethod>("ShipMethodID");
            Purchasing_Vendors = new FakeDbSet<Purchasing_Vendor>("BusinessEntityID");
            Sales_CountryRegionCurrencies = new FakeDbSet<Sales_CountryRegionCurrency>("CountryRegionCode", "CurrencyCode");
            Sales_CreditCards = new FakeDbSet<Sales_CreditCard>("CreditCardID");
            Sales_Currencies = new FakeDbSet<Sales_Currency>("CurrencyCode");
            Sales_CurrencyRates = new FakeDbSet<Sales_CurrencyRate>("CurrencyRateID");
            Sales_Customers = new FakeDbSet<Sales_Customer>("CustomerID");
            Sales_PersonCreditCards = new FakeDbSet<Sales_PersonCreditCard>("BusinessEntityID", "CreditCardID");
            Sales_SalesOrderDetails = new FakeDbSet<Sales_SalesOrderDetail>("SalesOrderID", "SalesOrderDetailID");
            Sales_SalesOrderHeaders = new FakeDbSet<Sales_SalesOrderHeader>("SalesOrderID");
            Sales_SalesOrderHeaderSalesReasons = new FakeDbSet<Sales_SalesOrderHeaderSalesReason>("SalesOrderID", "SalesReasonID");
            Sales_SalesPersons = new FakeDbSet<Sales_SalesPerson>("BusinessEntityID");
            Sales_SalesPersonQuotaHistories = new FakeDbSet<Sales_SalesPersonQuotaHistory>("BusinessEntityID", "QuotaDate");
            Sales_SalesReasons = new FakeDbSet<Sales_SalesReason>("SalesReasonID");
            Sales_SalesTaxRates = new FakeDbSet<Sales_SalesTaxRate>("SalesTaxRateID");
            Sales_SalesTerritories = new FakeDbSet<Sales_SalesTerritory>("TerritoryID");
            Sales_SalesTerritoryHistories = new FakeDbSet<Sales_SalesTerritoryHistory>("BusinessEntityID", "StartDate", "TerritoryID");
            Sales_ShoppingCartItems = new FakeDbSet<Sales_ShoppingCartItem>("ShoppingCartItemID");
            Sales_SpecialOffers = new FakeDbSet<Sales_SpecialOffer>("SpecialOfferID");
            Sales_SpecialOfferProducts = new FakeDbSet<Sales_SpecialOfferProduct>("SpecialOfferID", "ProductID");
            Sales_Stores = new FakeDbSet<Sales_Store>("BusinessEntityID");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // AWBuildVersion
    ///<summary>
    /// Current version number of the AdventureWorks 2016 sample database.
    ///</summary>
    [Table("AWBuildVersion", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class AWBuildVersion
    {

        ///<summary>
        /// Primary key for AWBuildVersion records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"SystemInformationID", Order = 1, TypeName = "tinyint")]
        [Index(@"PK_AWBuildVersion_SystemInformationID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "System information ID")]
        public byte SystemInformationID { get; set; } // SystemInformationID (Primary key)

        ///<summary>
        /// Version number of the database in 9.yy.mm.dd.00 format.
        ///</summary>
        [Column(@"Database Version", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "Database version")]
        public string DatabaseVersion { get; set; } // Database Version (length: 25)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"VersionDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Version date")]
        public System.DateTime VersionDate { get; set; } // VersionDate

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        public AWBuildVersion()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // DatabaseLog
    ///<summary>
    /// Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.
    ///</summary>
    [Table("DatabaseLog", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DatabaseLog
    {

        ///<summary>
        /// Primary key for DatabaseLog records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"DatabaseLogID", Order = 1, TypeName = "int")]
        [Index(@"PK_DatabaseLog_DatabaseLogID", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Database log ID")]
        public int DatabaseLogID { get; set; } // DatabaseLogID (Primary key)

        ///<summary>
        /// The date and time the DDL change occurred.
        ///</summary>
        [Column(@"PostTime", Order = 2, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Post time")]
        public System.DateTime PostTime { get; set; } // PostTime

        ///<summary>
        /// The user who implemented the DDL change.
        ///</summary>
        [Column(@"DatabaseUser", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(128)]
        [StringLength(128)]
        [Display(Name = "Database user")]
        public string DatabaseUser { get; set; } // DatabaseUser (length: 128)

        ///<summary>
        /// The type of DDL statement that was executed.
        ///</summary>
        [Column(@"Event", Order = 4, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(128)]
        [StringLength(128)]
        [Display(Name = "Event")]
        public string Event { get; set; } // Event (length: 128)

        ///<summary>
        /// The schema to which the changed object belongs.
        ///</summary>
        [Column(@"Schema", Order = 5, TypeName = "nvarchar")]
        [MaxLength(128)]
        [StringLength(128)]
        [Display(Name = "Schema")]
        public string Schema { get; set; } // Schema (length: 128)

        ///<summary>
        /// The object that was changed by the DDL statment.
        ///</summary>
        [Column(@"Object", Order = 6, TypeName = "nvarchar")]
        [MaxLength(128)]
        [StringLength(128)]
        [Display(Name = "Object")]
        public string Object { get; set; } // Object (length: 128)

        ///<summary>
        /// The exact Transact-SQL statement that was executed.
        ///</summary>
        [Column(@"TSQL", Order = 7, TypeName = "nvarchar(max)")]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "Tsql")]
        public string TSQL { get; set; } // TSQL

        ///<summary>
        /// The raw XML data generated by database trigger.
        ///</summary>
        [Column(@"XmlEvent", Order = 8, TypeName = "xml")]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "Xml event")]
        public string XmlEvent { get; set; } // XmlEvent
    }

    // ErrorLog
    ///<summary>
    /// Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.
    ///</summary>
    [Table("ErrorLog", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ErrorLog
    {

        ///<summary>
        /// Primary key for ErrorLog records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ErrorLogID", Order = 1, TypeName = "int")]
        [Index(@"PK_ErrorLog_ErrorLogID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Error log ID")]
        public int ErrorLogID { get; set; } // ErrorLogID (Primary key)

        ///<summary>
        /// The date and time at which the error occurred.
        ///</summary>
        [Column(@"ErrorTime", Order = 2, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Error time")]
        public System.DateTime ErrorTime { get; set; } // ErrorTime

        ///<summary>
        /// The user who executed the batch in which the error occurred.
        ///</summary>
        [Column(@"UserName", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(128)]
        [StringLength(128)]
        [DataType(DataType.Text)]
        [Display(Name = "User name")]
        public string UserName { get; set; } // UserName (length: 128)

        ///<summary>
        /// The error number of the error that occurred.
        ///</summary>
        [Column(@"ErrorNumber", Order = 4, TypeName = "int")]
        [Required]
        [Display(Name = "Error number")]
        public int ErrorNumber { get; set; } // ErrorNumber

        ///<summary>
        /// The severity of the error that occurred.
        ///</summary>
        [Column(@"ErrorSeverity", Order = 5, TypeName = "int")]
        [Display(Name = "Error severity")]
        public int? ErrorSeverity { get; set; } // ErrorSeverity

        ///<summary>
        /// The state number of the error that occurred.
        ///</summary>
        [Column(@"ErrorState", Order = 6, TypeName = "int")]
        [Display(Name = "Error state")]
        public int? ErrorState { get; set; } // ErrorState

        ///<summary>
        /// The name of the stored procedure or trigger where the error occurred.
        ///</summary>
        [Column(@"ErrorProcedure", Order = 7, TypeName = "nvarchar")]
        [MaxLength(126)]
        [StringLength(126)]
        [Display(Name = "Error procedure")]
        public string ErrorProcedure { get; set; } // ErrorProcedure (length: 126)

        ///<summary>
        /// The line number at which the error occurred.
        ///</summary>
        [Column(@"ErrorLine", Order = 8, TypeName = "int")]
        [Display(Name = "Error line")]
        public int? ErrorLine { get; set; } // ErrorLine

        ///<summary>
        /// The message text of the error that occurred.
        ///</summary>
        [Column(@"ErrorMessage", Order = 9, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Error message")]
        public string ErrorMessage { get; set; } // ErrorMessage (length: 4000)

        public ErrorLog()
        {
            ErrorTime = System.DateTime.Now;
        }
    }

    // Department
    ///<summary>
    /// Lookup table containing the departments within the Adventure Works Cycles company.
    ///</summary>
    [Table("Department", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class HumanResources_Department
    {

        ///<summary>
        /// Primary key for Department records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"DepartmentID", Order = 1, TypeName = "smallint")]
        [Index(@"PK_Department_DepartmentID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Department ID")]
        public short DepartmentID { get; set; } // DepartmentID (Primary key)

        ///<summary>
        /// Name of the department.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_Department_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Name of the group to which the department belongs.
        ///</summary>
        [Column(@"GroupName", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Group name")]
        public string GroupName { get; set; } // GroupName (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child HumanResources_EmployeeDepartmentHistories where [EmployeeDepartmentHistory].[DepartmentID] point to this entity (FK_EmployeeDepartmentHistory_Department_DepartmentID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<HumanResources_EmployeeDepartmentHistory> HumanResources_EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory.FK_EmployeeDepartmentHistory_Department_DepartmentID

        public HumanResources_Department()
        {
            ModifiedDate = System.DateTime.Now;
            HumanResources_EmployeeDepartmentHistories = new System.Collections.Generic.List<HumanResources_EmployeeDepartmentHistory>();
        }
    }

    // Employee
    ///<summary>
    /// Employee information such as salary, department, and title.
    ///</summary>
    [Table("Employee", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class HumanResources_Employee
    {

        ///<summary>
        /// Primary key for Employee records.  Foreign key to BusinessEntity.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_Employee_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        [ForeignKey("Person_Person")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Unique national identification number such as a social security number.
        ///</summary>
        [Column(@"NationalIDNumber", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_Employee_NationalIDNumber", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(15)]
        [StringLength(15)]
        [Display(Name = "National idn umber")]
        public string NationalIDNumber { get; set; } // NationalIDNumber (length: 15)

        ///<summary>
        /// Network login.
        ///</summary>
        [Column(@"LoginID", Order = 3, TypeName = "nvarchar")]
        [Index(@"AK_Employee_LoginID", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(256)]
        [StringLength(256)]
        [Display(Name = "Login ID")]
        public string LoginID { get; set; } // LoginID (length: 256)

        ///<summary>
        /// Where the employee is located in corporate hierarchy.
        ///</summary>
        [Column(@"OrganizationNode", Order = 4, TypeName = "hierarchyid")]
        [Index(@"IX_Employee_OrganizationNode", 1, IsUnique = false, IsClustered = false)]
        [Index(@"IX_Employee_OrganizationLevel_OrganizationNode", 2, IsUnique = false, IsClustered = false)]
        [Display(Name = "Organization node")]
        public System.Data.Entity.Hierarchy.HierarchyId OrganizationNode { get; set; } // OrganizationNode

        ///<summary>
        /// The depth of the employee in the corporate hierarchy.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"OrganizationLevel", Order = 5, TypeName = "smallint")]
        [Index(@"IX_Employee_OrganizationLevel_OrganizationNode", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Organization level")]
        public short? OrganizationLevel { get; private set; } // OrganizationLevel

        ///<summary>
        /// Work title such as Buyer or Sales Representative.
        ///</summary>
        [Column(@"JobTitle", Order = 6, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Job title")]
        public string JobTitle { get; set; } // JobTitle (length: 50)

        ///<summary>
        /// Date of birth.
        ///</summary>
        [Column(@"BirthDate", Order = 7, TypeName = "date")]
        [Required]
        [DataType(DataType.Date)]
        [Display(Name = "Birth date")]
        public System.DateTime BirthDate { get; set; } // BirthDate

        ///<summary>
        /// M = Married, S = Single
        ///</summary>
        [Column(@"MaritalStatus", Order = 8, TypeName = "nchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "Marital status")]
        public string MaritalStatus { get; set; } // MaritalStatus (length: 1)

        ///<summary>
        /// M = Male, F = Female
        ///</summary>
        [Column(@"Gender", Order = 9, TypeName = "nchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "Gender")]
        public string Gender { get; set; } // Gender (length: 1)

        ///<summary>
        /// Employee hired on this date.
        ///</summary>
        [Column(@"HireDate", Order = 10, TypeName = "date")]
        [Required]
        [DataType(DataType.Date)]
        [Display(Name = "Hire date")]
        public System.DateTime HireDate { get; set; } // HireDate

        ///<summary>
        /// Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.
        ///</summary>
        [Column(@"SalariedFlag", Order = 11, TypeName = "bit")]
        [Required]
        [Display(Name = "Salaried flag")]
        public bool SalariedFlag { get; set; } // SalariedFlag

        ///<summary>
        /// Number of available vacation hours.
        ///</summary>
        [Column(@"VacationHours", Order = 12, TypeName = "smallint")]
        [Required]
        [Display(Name = "Vacation hours")]
        public short VacationHours { get; set; } // VacationHours

        ///<summary>
        /// Number of available sick leave hours.
        ///</summary>
        [Column(@"SickLeaveHours", Order = 13, TypeName = "smallint")]
        [Required]
        [Display(Name = "Sick leave hours")]
        public short SickLeaveHours { get; set; } // SickLeaveHours

        ///<summary>
        /// 0 = Inactive, 1 = Active
        ///</summary>
        [Column(@"CurrentFlag", Order = 14, TypeName = "bit")]
        [Required]
        [Display(Name = "Current flag")]
        public bool CurrentFlag { get; set; } // CurrentFlag

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 15, TypeName = "uniqueidentifier")]
        [Index(@"AK_Employee_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 16, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) HumanResources_Employee pointed by [SalesPerson].[BusinessEntityID] (FK_SalesPerson_Employee_BusinessEntityID)
        /// </summary>
        public virtual Sales_SalesPerson Sales_SalesPerson { get; set; } // SalesPerson.FK_SalesPerson_Employee_BusinessEntityID
        /// <summary>
        /// Child HumanResources_EmployeeDepartmentHistories where [EmployeeDepartmentHistory].[BusinessEntityID] point to this entity (FK_EmployeeDepartmentHistory_Employee_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<HumanResources_EmployeeDepartmentHistory> HumanResources_EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory.FK_EmployeeDepartmentHistory_Employee_BusinessEntityID
        /// <summary>
        /// Child HumanResources_EmployeePayHistories where [EmployeePayHistory].[BusinessEntityID] point to this entity (FK_EmployeePayHistory_Employee_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<HumanResources_EmployeePayHistory> HumanResources_EmployeePayHistories { get; set; } // EmployeePayHistory.FK_EmployeePayHistory_Employee_BusinessEntityID
        /// <summary>
        /// Child HumanResources_JobCandidates where [JobCandidate].[BusinessEntityID] point to this entity (FK_JobCandidate_Employee_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<HumanResources_JobCandidate> HumanResources_JobCandidates { get; set; } // JobCandidate.FK_JobCandidate_Employee_BusinessEntityID
        /// <summary>
        /// Child Production_Documents where [Document].[Owner] point to this entity (FK_Document_Employee_Owner)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_Document> Production_Documents { get; set; } // Document.FK_Document_Employee_Owner
        /// <summary>
        /// Child Purchasing_PurchaseOrderHeaders where [PurchaseOrderHeader].[EmployeeID] point to this entity (FK_PurchaseOrderHeader_Employee_EmployeeID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Purchasing_PurchaseOrderHeader> Purchasing_PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader.FK_PurchaseOrderHeader_Employee_EmployeeID

        // Foreign keys

        /// <summary>
        /// Parent Person_Person pointed by [Employee].([BusinessEntityID]) (FK_Employee_Person_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID"), Required] public virtual Person_Person Person_Person { get; set; } // FK_Employee_Person_BusinessEntityID

        public HumanResources_Employee()
        {
            SalariedFlag = true;
            VacationHours = 0;
            SickLeaveHours = 0;
            CurrentFlag = true;
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Production_Documents = new System.Collections.Generic.List<Production_Document>();
            HumanResources_EmployeeDepartmentHistories = new System.Collections.Generic.List<HumanResources_EmployeeDepartmentHistory>();
            HumanResources_EmployeePayHistories = new System.Collections.Generic.List<HumanResources_EmployeePayHistory>();
            HumanResources_JobCandidates = new System.Collections.Generic.List<HumanResources_JobCandidate>();
            Purchasing_PurchaseOrderHeaders = new System.Collections.Generic.List<Purchasing_PurchaseOrderHeader>();
        }
    }

    // EmployeeDepartmentHistory
    ///<summary>
    /// Employee department transfers.
    ///</summary>
    [Table("EmployeeDepartmentHistory", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class HumanResources_EmployeeDepartmentHistory
    {

        ///<summary>
        /// Employee identification number. Foreign key to Employee.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_DepartmentID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Department in which the employee worked including currently. Foreign key to Department.DepartmentID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"DepartmentID", Order = 2, TypeName = "smallint")]
        [Index(@"IX_EmployeeDepartmentHistory_DepartmentID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_DepartmentID", 3, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Department ID")]
        public short DepartmentID { get; set; } // DepartmentID (Primary key)

        ///<summary>
        /// Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ShiftID", Order = 3, TypeName = "tinyint")]
        [Index(@"IX_EmployeeDepartmentHistory_ShiftID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_DepartmentID", 4, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Shift ID")]
        public byte ShiftID { get; set; } // ShiftID (Primary key)

        ///<summary>
        /// Date the employee started work in the department.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StartDate", Order = 4, TypeName = "date")]
        [Index(@"PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_DepartmentID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [DataType(DataType.Date)]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)

        ///<summary>
        /// Date the employee left the department. NULL = Current department.
        ///</summary>
        [Column(@"EndDate", Order = 5, TypeName = "date")]
        [DataType(DataType.Date)]
        [Display(Name = "End date")]
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent HumanResources_Employee pointed by [EmployeeDepartmentHistory].([BusinessEntityID]) (FK_EmployeeDepartmentHistory_Employee_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID"), Required] public virtual HumanResources_Employee HumanResources_Employee { get; set; } // FK_EmployeeDepartmentHistory_Employee_BusinessEntityID

        /// <summary>
        /// Parent HumanResources_Department pointed by [EmployeeDepartmentHistory].([DepartmentID]) (FK_EmployeeDepartmentHistory_Department_DepartmentID)
        /// </summary>
        [ForeignKey("DepartmentID"), Required] public virtual HumanResources_Department HumanResources_Department { get; set; } // FK_EmployeeDepartmentHistory_Department_DepartmentID

        /// <summary>
        /// Parent HumanResources_Shift pointed by [EmployeeDepartmentHistory].([ShiftID]) (FK_EmployeeDepartmentHistory_Shift_ShiftID)
        /// </summary>
        [ForeignKey("ShiftID"), Required] public virtual HumanResources_Shift HumanResources_Shift { get; set; } // FK_EmployeeDepartmentHistory_Shift_ShiftID

        public HumanResources_EmployeeDepartmentHistory()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // EmployeePayHistory
    ///<summary>
    /// Employee pay history.
    ///</summary>
    [Table("EmployeePayHistory", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class HumanResources_EmployeePayHistory
    {

        ///<summary>
        /// Employee identification number. Foreign key to Employee.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_EmployeePayHistory_BusinessEntityID_RateChangeDate", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Date the change in pay is effective
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"RateChangeDate", Order = 2, TypeName = "datetime")]
        [Index(@"PK_EmployeePayHistory_BusinessEntityID_RateChangeDate", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [DataType(DataType.DateTime)]
        [Display(Name = "Rate change date")]
        public System.DateTime RateChangeDate { get; set; } // RateChangeDate (Primary key)

        ///<summary>
        /// Salary hourly rate.
        ///</summary>
        [Column(@"Rate", Order = 3, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Rate")]
        public decimal Rate { get; set; } // Rate

        ///<summary>
        /// 1 = Salary received monthly, 2 = Salary received biweekly
        ///</summary>
        [Column(@"PayFrequency", Order = 4, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Pay frequency")]
        public byte PayFrequency { get; set; } // PayFrequency

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent HumanResources_Employee pointed by [EmployeePayHistory].([BusinessEntityID]) (FK_EmployeePayHistory_Employee_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID"), Required] public virtual HumanResources_Employee HumanResources_Employee { get; set; } // FK_EmployeePayHistory_Employee_BusinessEntityID

        public HumanResources_EmployeePayHistory()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // JobCandidate
    ///<summary>
    /// Résumés submitted to Human Resources by job applicants.
    ///</summary>
    [Table("JobCandidate", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class HumanResources_JobCandidate
    {

        ///<summary>
        /// Primary key for JobCandidate records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"JobCandidateID", Order = 1, TypeName = "int")]
        [Index(@"PK_JobCandidate_JobCandidateID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Job candidate ID")]
        public int JobCandidateID { get; set; } // JobCandidateID (Primary key)

        ///<summary>
        /// Employee identification number if applicant was hired. Foreign key to Employee.BusinessEntityID.
        ///</summary>
        [Column(@"BusinessEntityID", Order = 2, TypeName = "int")]
        [Index(@"IX_JobCandidate_BusinessEntityID", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Business entity ID")]
        public int? BusinessEntityID { get; set; } // BusinessEntityID

        ///<summary>
        /// Résumé in XML format.
        ///</summary>
        [Column(@"Resume", Order = 3, TypeName = "xml")]
        [Display(Name = "Resume")]
        public string Resume { get; set; } // Resume

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent HumanResources_Employee pointed by [JobCandidate].([BusinessEntityID]) (FK_JobCandidate_Employee_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID")] public virtual HumanResources_Employee HumanResources_Employee { get; set; } // FK_JobCandidate_Employee_BusinessEntityID

        public HumanResources_JobCandidate()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Shift
    ///<summary>
    /// Work shift lookup table.
    ///</summary>
    [Table("Shift", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class HumanResources_Shift
    {

        ///<summary>
        /// Primary key for Shift records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ShiftID", Order = 1, TypeName = "tinyint")]
        [Index(@"PK_Shift_ShiftID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Shift ID")]
        public byte ShiftID { get; set; } // ShiftID (Primary key)

        ///<summary>
        /// Shift description.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_Shift_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Shift start time.
        ///</summary>
        [Column(@"StartTime", Order = 3, TypeName = "time")]
        [Index(@"AK_Shift_StartTime_EndTime", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Start time")]
        public System.TimeSpan StartTime { get; set; } // StartTime

        ///<summary>
        /// Shift end time.
        ///</summary>
        [Column(@"EndTime", Order = 4, TypeName = "time")]
        [Index(@"AK_Shift_StartTime_EndTime", 2, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "End time")]
        public System.TimeSpan EndTime { get; set; } // EndTime

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child HumanResources_EmployeeDepartmentHistories where [EmployeeDepartmentHistory].[ShiftID] point to this entity (FK_EmployeeDepartmentHistory_Shift_ShiftID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<HumanResources_EmployeeDepartmentHistory> HumanResources_EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory.FK_EmployeeDepartmentHistory_Shift_ShiftID

        public HumanResources_Shift()
        {
            ModifiedDate = System.DateTime.Now;
            HumanResources_EmployeeDepartmentHistories = new System.Collections.Generic.List<HumanResources_EmployeeDepartmentHistory>();
        }
    }

    // Address
    ///<summary>
    /// Street address information for customers, employees, and vendors.
    ///</summary>
    [Table("Address", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_Address
    {

        ///<summary>
        /// Primary key for Address records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"AddressID", Order = 1, TypeName = "int")]
        [Index(@"PK_Address_AddressID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Address ID")]
        public int AddressID { get; set; } // AddressID (Primary key)

        ///<summary>
        /// First street address line.
        ///</summary>
        [Column(@"AddressLine1", Order = 2, TypeName = "nvarchar")]
        [Index(@"IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(60)]
        [StringLength(60)]
        [Display(Name = "Address line 1")]
        public string AddressLine1 { get; set; } // AddressLine1 (length: 60)

        ///<summary>
        /// Second street address line.
        ///</summary>
        [Column(@"AddressLine2", Order = 3, TypeName = "nvarchar")]
        [Index(@"IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode", 2, IsUnique = true, IsClustered = false)]
        [MaxLength(60)]
        [StringLength(60)]
        [Display(Name = "Address line 2")]
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)

        ///<summary>
        /// Name of the city.
        ///</summary>
        [Column(@"City", Order = 4, TypeName = "nvarchar")]
        [Index(@"IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode", 3, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "City")]
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// Unique identification number for the state or province. Foreign key to StateProvince table.
        ///</summary>
        [Column(@"StateProvinceID", Order = 5, TypeName = "int")]
        [Index(@"IX_Address_StateProvinceID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode", 4, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "State province ID")]
        public int StateProvinceID { get; set; } // StateProvinceID

        ///<summary>
        /// Postal code for the street address.
        ///</summary>
        [Column(@"PostalCode", Order = 6, TypeName = "nvarchar")]
        [Index(@"IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode", 5, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(15)]
        [StringLength(15)]
        [DataType(DataType.PostalCode)]
        [Display(Name = "Postal code")]
        public string PostalCode { get; set; } // PostalCode (length: 15)

        ///<summary>
        /// Latitude and longitude of this address.
        ///</summary>
        [Column(@"SpatialLocation", Order = 7, TypeName = "geography")]
        [Display(Name = "Spatial location")]
        public System.Data.Entity.Spatial.DbGeography SpatialLocation { get; set; } // SpatialLocation

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 8, TypeName = "uniqueidentifier")]
        [Index(@"AK_Address_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 9, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Person_BusinessEntityAddresses where [BusinessEntityAddress].[AddressID] point to this entity (FK_BusinessEntityAddress_Address_AddressID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; } // BusinessEntityAddress.FK_BusinessEntityAddress_Address_AddressID
        /// <summary>
        /// Child Sales_SalesOrderHeaders where [SalesOrderHeader].[BillToAddressID] point to this entity (FK_SalesOrderHeader_Address_BillToAddressID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> Sales_SalesOrderHeaders_BillToAddressID { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Address_BillToAddressID
        /// <summary>
        /// Child Sales_SalesOrderHeaders where [SalesOrderHeader].[ShipToAddressID] point to this entity (FK_SalesOrderHeader_Address_ShipToAddressID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> Sales_SalesOrderHeaders_ShipToAddressID { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Address_ShipToAddressID

        // Foreign keys

        /// <summary>
        /// Parent Person_StateProvince pointed by [Address].([StateProvinceID]) (FK_Address_StateProvince_StateProvinceID)
        /// </summary>
        [ForeignKey("StateProvinceID"), Required] public virtual Person_StateProvince Person_StateProvince { get; set; } // FK_Address_StateProvince_StateProvinceID

        public Person_Address()
        {
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityAddresses = new System.Collections.Generic.List<Person_BusinessEntityAddress>();
            Sales_SalesOrderHeaders_BillToAddressID = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
            Sales_SalesOrderHeaders_ShipToAddressID = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
        }
    }

    // AddressType
    ///<summary>
    /// Types of addresses stored in the Address table.
    ///</summary>
    [Table("AddressType", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_AddressType
    {

        ///<summary>
        /// Primary key for AddressType records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"AddressTypeID", Order = 1, TypeName = "int")]
        [Index(@"PK_AddressType_AddressTypeID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Address type ID")]
        public int AddressTypeID { get; set; } // AddressTypeID (Primary key)

        ///<summary>
        /// Address type description. For example, Billing, Home, or Shipping.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_AddressType_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 3, TypeName = "uniqueidentifier")]
        [Index(@"AK_AddressType_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Person_BusinessEntityAddresses where [BusinessEntityAddress].[AddressTypeID] point to this entity (FK_BusinessEntityAddress_AddressType_AddressTypeID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; } // BusinessEntityAddress.FK_BusinessEntityAddress_AddressType_AddressTypeID

        public Person_AddressType()
        {
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityAddresses = new System.Collections.Generic.List<Person_BusinessEntityAddress>();
        }
    }

    // BusinessEntity
    ///<summary>
    /// Source of the ID that connects vendors, customers, and employees with address and contact information.
    ///</summary>
    [Table("BusinessEntity", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_BusinessEntity
    {

        ///<summary>
        /// Primary key for all customers, vendors, and employees.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_BusinessEntity_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 2, TypeName = "uniqueidentifier")]
        [Index(@"AK_BusinessEntity_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Person_BusinessEntity pointed by [Person].[BusinessEntityID] (FK_Person_BusinessEntity_BusinessEntityID)
        /// </summary>
        public virtual Person_Person Person_Person { get; set; } // Person.FK_Person_BusinessEntity_BusinessEntityID
        /// <summary>
        /// Parent (One-to-One) Person_BusinessEntity pointed by [Vendor].[BusinessEntityID] (FK_Vendor_BusinessEntity_BusinessEntityID)
        /// </summary>
        public virtual Purchasing_Vendor Purchasing_Vendor { get; set; } // Vendor.FK_Vendor_BusinessEntity_BusinessEntityID
        /// <summary>
        /// Parent (One-to-One) Person_BusinessEntity pointed by [Store].[BusinessEntityID] (FK_Store_BusinessEntity_BusinessEntityID)
        /// </summary>
        public virtual Sales_Store Sales_Store { get; set; } // Store.FK_Store_BusinessEntity_BusinessEntityID
        /// <summary>
        /// Child Person_BusinessEntityAddresses where [BusinessEntityAddress].[BusinessEntityID] point to this entity (FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; } // BusinessEntityAddress.FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID
        /// <summary>
        /// Child Person_BusinessEntityContacts where [BusinessEntityContact].[BusinessEntityID] point to this entity (FK_BusinessEntityContact_BusinessEntity_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; } // BusinessEntityContact.FK_BusinessEntityContact_BusinessEntity_BusinessEntityID

        public Person_BusinessEntity()
        {
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityAddresses = new System.Collections.Generic.List<Person_BusinessEntityAddress>();
            Person_BusinessEntityContacts = new System.Collections.Generic.List<Person_BusinessEntityContact>();
        }
    }

    // BusinessEntityAddress
    ///<summary>
    /// Cross-reference table mapping customers, vendors, and employees to their addresses.
    ///</summary>
    [Table("BusinessEntityAddress", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_BusinessEntityAddress
    {

        ///<summary>
        /// Primary key. Foreign key to BusinessEntity.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressTypeID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Address.AddressID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"AddressID", Order = 2, TypeName = "int")]
        [Index(@"IX_BusinessEntityAddress_AddressID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressTypeID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Address ID")]
        public int AddressID { get; set; } // AddressID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to AddressType.AddressTypeID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"AddressTypeID", Order = 3, TypeName = "int")]
        [Index(@"IX_BusinessEntityAddress_AddressTypeID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressTypeID", 3, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Address type ID")]
        public int AddressTypeID { get; set; } // AddressTypeID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 4, TypeName = "uniqueidentifier")]
        [Index(@"AK_BusinessEntityAddress_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Person_Address pointed by [BusinessEntityAddress].([AddressID]) (FK_BusinessEntityAddress_Address_AddressID)
        /// </summary>
        [ForeignKey("AddressID"), Required] public virtual Person_Address Person_Address { get; set; } // FK_BusinessEntityAddress_Address_AddressID

        /// <summary>
        /// Parent Person_AddressType pointed by [BusinessEntityAddress].([AddressTypeID]) (FK_BusinessEntityAddress_AddressType_AddressTypeID)
        /// </summary>
        [ForeignKey("AddressTypeID"), Required] public virtual Person_AddressType Person_AddressType { get; set; } // FK_BusinessEntityAddress_AddressType_AddressTypeID

        /// <summary>
        /// Parent Person_BusinessEntity pointed by [BusinessEntityAddress].([BusinessEntityID]) (FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID"), Required] public virtual Person_BusinessEntity Person_BusinessEntity { get; set; } // FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID

        public Person_BusinessEntityAddress()
        {
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // BusinessEntityContact
    ///<summary>
    /// Cross-reference table mapping stores, vendors, and employees to people
    ///</summary>
    [Table("BusinessEntityContact", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_BusinessEntityContact
    {

        ///<summary>
        /// Primary key. Foreign key to BusinessEntity.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Person.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PersonID", Order = 2, TypeName = "int")]
        [Index(@"IX_BusinessEntityContact_PersonID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Person ID")]
        public int PersonID { get; set; } // PersonID (Primary key)

        ///<summary>
        /// Primary key.  Foreign key to ContactType.ContactTypeID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ContactTypeID", Order = 3, TypeName = "int")]
        [Index(@"IX_BusinessEntityContact_ContactTypeID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeID", 3, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Contact type ID")]
        public int ContactTypeID { get; set; } // ContactTypeID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 4, TypeName = "uniqueidentifier")]
        [Index(@"AK_BusinessEntityContact_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Person_BusinessEntity pointed by [BusinessEntityContact].([BusinessEntityID]) (FK_BusinessEntityContact_BusinessEntity_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID"), Required] public virtual Person_BusinessEntity Person_BusinessEntity { get; set; } // FK_BusinessEntityContact_BusinessEntity_BusinessEntityID

        /// <summary>
        /// Parent Person_ContactType pointed by [BusinessEntityContact].([ContactTypeID]) (FK_BusinessEntityContact_ContactType_ContactTypeID)
        /// </summary>
        [ForeignKey("ContactTypeID"), Required] public virtual Person_ContactType Person_ContactType { get; set; } // FK_BusinessEntityContact_ContactType_ContactTypeID

        /// <summary>
        /// Parent Person_Person pointed by [BusinessEntityContact].([PersonID]) (FK_BusinessEntityContact_Person_PersonID)
        /// </summary>
        [ForeignKey("PersonID"), Required] public virtual Person_Person Person_Person { get; set; } // FK_BusinessEntityContact_Person_PersonID

        public Person_BusinessEntityContact()
        {
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ContactType
    ///<summary>
    /// Lookup table containing the types of business entity contacts.
    ///</summary>
    [Table("ContactType", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_ContactType
    {

        ///<summary>
        /// Primary key for ContactType records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ContactTypeID", Order = 1, TypeName = "int")]
        [Index(@"PK_ContactType_ContactTypeID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Contact type ID")]
        public int ContactTypeID { get; set; } // ContactTypeID (Primary key)

        ///<summary>
        /// Contact type description.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_ContactType_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Person_BusinessEntityContacts where [BusinessEntityContact].[ContactTypeID] point to this entity (FK_BusinessEntityContact_ContactType_ContactTypeID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; } // BusinessEntityContact.FK_BusinessEntityContact_ContactType_ContactTypeID

        public Person_ContactType()
        {
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityContacts = new System.Collections.Generic.List<Person_BusinessEntityContact>();
        }
    }

    // CountryRegion
    ///<summary>
    /// Lookup table containing the ISO standard codes for countries and regions.
    ///</summary>
    [Table("CountryRegion", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_CountryRegion
    {

        ///<summary>
        /// ISO standard code for countries and regions.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CountryRegionCode", Order = 1, TypeName = "nvarchar")]
        [Index(@"PK_CountryRegion_CountryRegionCode", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Key]
        [Display(Name = "Country region code")]
        public string CountryRegionCode { get; set; } // CountryRegionCode (Primary key) (length: 3)

        ///<summary>
        /// Country or region name.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_CountryRegion_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Person_StateProvinces where [StateProvince].[CountryRegionCode] point to this entity (FK_StateProvince_CountryRegion_CountryRegionCode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_StateProvince> Person_StateProvinces { get; set; } // StateProvince.FK_StateProvince_CountryRegion_CountryRegionCode
        /// <summary>
        /// Child Sales_CountryRegionCurrencies where [CountryRegionCurrency].[CountryRegionCode] point to this entity (FK_CountryRegionCurrency_CountryRegion_CountryRegionCode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_CountryRegionCurrency> Sales_CountryRegionCurrencies { get; set; } // CountryRegionCurrency.FK_CountryRegionCurrency_CountryRegion_CountryRegionCode
        /// <summary>
        /// Child Sales_SalesTerritories where [SalesTerritory].[CountryRegionCode] point to this entity (FK_SalesTerritory_CountryRegion_CountryRegionCode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesTerritory> Sales_SalesTerritories { get; set; } // SalesTerritory.FK_SalesTerritory_CountryRegion_CountryRegionCode

        public Person_CountryRegion()
        {
            ModifiedDate = System.DateTime.Now;
            Sales_CountryRegionCurrencies = new System.Collections.Generic.List<Sales_CountryRegionCurrency>();
            Sales_SalesTerritories = new System.Collections.Generic.List<Sales_SalesTerritory>();
            Person_StateProvinces = new System.Collections.Generic.List<Person_StateProvince>();
        }
    }

    // EmailAddress
    ///<summary>
    /// Where to send a person email.
    ///</summary>
    [Table("EmailAddress", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_EmailAddress
    {

        ///<summary>
        /// Primary key. Person associated with this email address.  Foreign key to Person.BusinessEntityID
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_EmailAddress_BusinessEntityID_EmailAddressID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. ID of this email address.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"EmailAddressID", Order = 2, TypeName = "int")]
        [Index(@"PK_EmailAddress_BusinessEntityID_EmailAddressID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Email address ID")]
        public int EmailAddressID { get; set; } // EmailAddressID (Primary key)

        ///<summary>
        /// E-mail address for the person.
        ///</summary>
        [Column(@"EmailAddress", Order = 3, TypeName = "nvarchar")]
        [Index(@"IX_EmailAddress_EmailAddress", 1, IsUnique = false, IsClustered = false)]
        [MaxLength(50)]
        [StringLength(50)]
        [EmailAddress]
        [Display(Name = "Email address")]
        public string EmailAddress { get; set; } // EmailAddress (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 4, TypeName = "uniqueidentifier")]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Person_Person pointed by [EmailAddress].([BusinessEntityID]) (FK_EmailAddress_Person_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID"), Required] public virtual Person_Person Person_Person { get; set; } // FK_EmailAddress_Person_BusinessEntityID

        public Person_EmailAddress()
        {
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Password
    ///<summary>
    /// One way hashed authentication information
    ///</summary>
    [Table("Password", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_Password
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_Password_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        [ForeignKey("Person_Person")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Password for the e-mail account.
        ///</summary>
        [Column(@"PasswordHash", Order = 2, TypeName = "varchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(128)]
        [StringLength(128)]
        [Display(Name = "Password hash")]
        public string PasswordHash { get; set; } // PasswordHash (length: 128)

        ///<summary>
        /// Random value concatenated with the password string before the password is hashed.
        ///</summary>
        [Column(@"PasswordSalt", Order = 3, TypeName = "varchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Password salt")]
        public string PasswordSalt { get; set; } // PasswordSalt (length: 10)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 4, TypeName = "uniqueidentifier")]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Person_Person pointed by [Password].([BusinessEntityID]) (FK_Password_Person_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID"), Required] public virtual Person_Person Person_Person { get; set; } // FK_Password_Person_BusinessEntityID

        public Person_Password()
        {
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Person
    ///<summary>
    /// Human beings involved with AdventureWorks: employees, customer contacts, and vendor contacts.
    ///</summary>
    [Table("Person", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_Person
    {

        ///<summary>
        /// Primary key for Person records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_Person_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        [ForeignKey("Person_BusinessEntity")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact
        ///</summary>
        [Column(@"PersonType", Order = 2, TypeName = "nchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "Person type")]
        public string PersonType { get; set; } // PersonType (length: 2)

        ///<summary>
        /// 0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.
        ///</summary>
        [Column(@"NameStyle", Order = 3, TypeName = "bit")]
        [Required]
        [Display(Name = "Name style")]
        public bool NameStyle { get; set; } // NameStyle

        ///<summary>
        /// A courtesy title. For example, Mr. or Ms.
        ///</summary>
        [Column(@"Title", Order = 4, TypeName = "nvarchar")]
        [MaxLength(8)]
        [StringLength(8)]
        [Display(Name = "Title")]
        public string Title { get; set; } // Title (length: 8)

        ///<summary>
        /// First name of the person.
        ///</summary>
        [Column(@"FirstName", Order = 5, TypeName = "nvarchar")]
        [Index(@"IX_Person_LastName_FirstName_MiddleName", 2, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (length: 50)

        ///<summary>
        /// Middle name or middle initial of the person.
        ///</summary>
        [Column(@"MiddleName", Order = 6, TypeName = "nvarchar")]
        [Index(@"IX_Person_LastName_FirstName_MiddleName", 3, IsUnique = false, IsClustered = false)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Middle name")]
        public string MiddleName { get; set; } // MiddleName (length: 50)

        ///<summary>
        /// Last name of the person.
        ///</summary>
        [Column(@"LastName", Order = 7, TypeName = "nvarchar")]
        [Index(@"IX_Person_LastName_FirstName_MiddleName", 1, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (length: 50)

        ///<summary>
        /// Surname suffix. For example, Sr. or Jr.
        ///</summary>
        [Column(@"Suffix", Order = 8, TypeName = "nvarchar")]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Suffix")]
        public string Suffix { get; set; } // Suffix (length: 10)

        ///<summary>
        /// 0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners.
        ///</summary>
        [Column(@"EmailPromotion", Order = 9, TypeName = "int")]
        [Required]
        [Display(Name = "Email promotion")]
        public int EmailPromotion { get; set; } // EmailPromotion

        ///<summary>
        /// Additional contact information about the person stored in xml format.
        ///</summary>
        [Column(@"AdditionalContactInfo", Order = 10, TypeName = "xml")]
        [Display(Name = "Additional contact info")]
        public string AdditionalContactInfo { get; set; } // AdditionalContactInfo

        ///<summary>
        /// Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.
        ///</summary>
        [Column(@"Demographics", Order = 11, TypeName = "xml")]
        [Display(Name = "Demographics")]
        public string Demographics { get; set; } // Demographics

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 12, TypeName = "uniqueidentifier")]
        [Index(@"AK_Person_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 13, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Person_Person pointed by [Employee].[BusinessEntityID] (FK_Employee_Person_BusinessEntityID)
        /// </summary>
        public virtual HumanResources_Employee HumanResources_Employee { get; set; } // Employee.FK_Employee_Person_BusinessEntityID
        /// <summary>
        /// Parent (One-to-One) Person_Person pointed by [Password].[BusinessEntityID] (FK_Password_Person_BusinessEntityID)
        /// </summary>
        public virtual Person_Password Person_Password { get; set; } // Password.FK_Password_Person_BusinessEntityID
        /// <summary>
        /// Child Person_BusinessEntityContacts where [BusinessEntityContact].[PersonID] point to this entity (FK_BusinessEntityContact_Person_PersonID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; } // BusinessEntityContact.FK_BusinessEntityContact_Person_PersonID
        /// <summary>
        /// Child Person_EmailAddresses where [EmailAddress].[BusinessEntityID] point to this entity (FK_EmailAddress_Person_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_EmailAddress> Person_EmailAddresses { get; set; } // EmailAddress.FK_EmailAddress_Person_BusinessEntityID
        /// <summary>
        /// Child Person_PersonPhones where [PersonPhone].[BusinessEntityID] point to this entity (FK_PersonPhone_Person_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_PersonPhone> Person_PersonPhones { get; set; } // PersonPhone.FK_PersonPhone_Person_BusinessEntityID
        /// <summary>
        /// Child Sales_Customers where [Customer].[PersonID] point to this entity (FK_Customer_Person_PersonID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_Customer> Sales_Customers { get; set; } // Customer.FK_Customer_Person_PersonID
        /// <summary>
        /// Child Sales_PersonCreditCards where [PersonCreditCard].[BusinessEntityID] point to this entity (FK_PersonCreditCard_Person_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_PersonCreditCard> Sales_PersonCreditCards { get; set; } // PersonCreditCard.FK_PersonCreditCard_Person_BusinessEntityID

        // Foreign keys

        /// <summary>
        /// Parent Person_BusinessEntity pointed by [Person].([BusinessEntityID]) (FK_Person_BusinessEntity_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID"), Required] public virtual Person_BusinessEntity Person_BusinessEntity { get; set; } // FK_Person_BusinessEntity_BusinessEntityID

        public Person_Person()
        {
            NameStyle = false;
            EmailPromotion = 0;
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityContacts = new System.Collections.Generic.List<Person_BusinessEntityContact>();
            Sales_Customers = new System.Collections.Generic.List<Sales_Customer>();
            Person_EmailAddresses = new System.Collections.Generic.List<Person_EmailAddress>();
            Sales_PersonCreditCards = new System.Collections.Generic.List<Sales_PersonCreditCard>();
            Person_PersonPhones = new System.Collections.Generic.List<Person_PersonPhone>();
        }
    }

    // PersonPhone
    ///<summary>
    /// Telephone number and type of a person.
    ///</summary>
    [Table("PersonPhone", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_PersonPhone
    {

        ///<summary>
        /// Business entity identification number. Foreign key to Person.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Telephone number identification number.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PhoneNumber", Order = 2, TypeName = "nvarchar")]
        [Index(@"IX_PersonPhone_PhoneNumber", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID", 2, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(25)]
        [StringLength(25)]
        [Key]
        [Phone]
        [Display(Name = "Phone number")]
        public string PhoneNumber { get; set; } // PhoneNumber (Primary key) (length: 25)

        ///<summary>
        /// Kind of phone number. Foreign key to PhoneNumberType.PhoneNumberTypeID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PhoneNumberTypeID", Order = 3, TypeName = "int")]
        [Index(@"PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID", 3, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Phone number type ID")]
        public int PhoneNumberTypeID { get; set; } // PhoneNumberTypeID (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Person_Person pointed by [PersonPhone].([BusinessEntityID]) (FK_PersonPhone_Person_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID"), Required] public virtual Person_Person Person_Person { get; set; } // FK_PersonPhone_Person_BusinessEntityID

        /// <summary>
        /// Parent Person_PhoneNumberType pointed by [PersonPhone].([PhoneNumberTypeID]) (FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID)
        /// </summary>
        [ForeignKey("PhoneNumberTypeID"), Required] public virtual Person_PhoneNumberType Person_PhoneNumberType { get; set; } // FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID

        public Person_PersonPhone()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // PhoneNumberType
    ///<summary>
    /// Type of phone number of a person.
    ///</summary>
    [Table("PhoneNumberType", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_PhoneNumberType
    {

        ///<summary>
        /// Primary key for telephone number type records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"PhoneNumberTypeID", Order = 1, TypeName = "int")]
        [Index(@"PK_PhoneNumberType_PhoneNumberTypeID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Phone number type ID")]
        public int PhoneNumberTypeID { get; set; } // PhoneNumberTypeID (Primary key)

        ///<summary>
        /// Name of the telephone number type
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Person_PersonPhones where [PersonPhone].[PhoneNumberTypeID] point to this entity (FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_PersonPhone> Person_PersonPhones { get; set; } // PersonPhone.FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID

        public Person_PhoneNumberType()
        {
            ModifiedDate = System.DateTime.Now;
            Person_PersonPhones = new System.Collections.Generic.List<Person_PersonPhone>();
        }
    }

    // StateProvince
    ///<summary>
    /// State and province lookup table.
    ///</summary>
    [Table("StateProvince", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_StateProvince
    {

        ///<summary>
        /// Primary key for StateProvince records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"StateProvinceID", Order = 1, TypeName = "int")]
        [Index(@"PK_StateProvince_StateProvinceID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "State province ID")]
        public int StateProvinceID { get; set; } // StateProvinceID (Primary key)

        ///<summary>
        /// ISO standard state or province code.
        ///</summary>
        [Column(@"StateProvinceCode", Order = 2, TypeName = "nchar")]
        [Index(@"AK_StateProvince_StateProvinceCode_CountryRegionCode", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "State province code")]
        public string StateProvinceCode { get; set; } // StateProvinceCode (length: 3)

        ///<summary>
        /// ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
        ///</summary>
        [Column(@"CountryRegionCode", Order = 3, TypeName = "nvarchar")]
        [Index(@"AK_StateProvince_StateProvinceCode_CountryRegionCode", 2, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "Country region code")]
        public string CountryRegionCode { get; set; } // CountryRegionCode (length: 3)

        ///<summary>
        /// 0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.
        ///</summary>
        [Column(@"IsOnlyStateProvinceFlag", Order = 4, TypeName = "bit")]
        [Required]
        [Display(Name = "Is only state province flag")]
        public bool IsOnlyStateProvinceFlag { get; set; } // IsOnlyStateProvinceFlag

        ///<summary>
        /// State or province description.
        ///</summary>
        [Column(@"Name", Order = 5, TypeName = "nvarchar")]
        [Index(@"AK_StateProvince_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        [Column(@"TerritoryID", Order = 6, TypeName = "int")]
        [Required]
        [Display(Name = "Territory ID")]
        public int TerritoryID { get; set; } // TerritoryID

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 7, TypeName = "uniqueidentifier")]
        [Index(@"AK_StateProvince_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 8, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Person_Addresses where [Address].[StateProvinceID] point to this entity (FK_Address_StateProvince_StateProvinceID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_Address> Person_Addresses { get; set; } // Address.FK_Address_StateProvince_StateProvinceID
        /// <summary>
        /// Child Sales_SalesTaxRates where [SalesTaxRate].[StateProvinceID] point to this entity (FK_SalesTaxRate_StateProvince_StateProvinceID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesTaxRate> Sales_SalesTaxRates { get; set; } // SalesTaxRate.FK_SalesTaxRate_StateProvince_StateProvinceID

        // Foreign keys

        /// <summary>
        /// Parent Person_CountryRegion pointed by [StateProvince].([CountryRegionCode]) (FK_StateProvince_CountryRegion_CountryRegionCode)
        /// </summary>
        [ForeignKey("CountryRegionCode"), Required] public virtual Person_CountryRegion Person_CountryRegion { get; set; } // FK_StateProvince_CountryRegion_CountryRegionCode

        /// <summary>
        /// Parent Sales_SalesTerritory pointed by [StateProvince].([TerritoryID]) (FK_StateProvince_SalesTerritory_TerritoryID)
        /// </summary>
        [ForeignKey("TerritoryID"), Required] public virtual Sales_SalesTerritory Sales_SalesTerritory { get; set; } // FK_StateProvince_SalesTerritory_TerritoryID

        public Person_StateProvince()
        {
            IsOnlyStateProvinceFlag = true;
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_Addresses = new System.Collections.Generic.List<Person_Address>();
            Sales_SalesTaxRates = new System.Collections.Generic.List<Sales_SalesTaxRate>();
        }
    }

    // BillOfMaterials
    ///<summary>
    /// Items required to make bicycles and bicycle subassemblies. It identifies the heirarchical relationship between a parent product and its components.
    ///</summary>
    [Table("BillOfMaterials", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_BillOfMaterial
    {

        ///<summary>
        /// Primary key for BillOfMaterials records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"BillOfMaterialsID", Order = 1, TypeName = "int")]
        [Index(@"PK_BillOfMaterials_BillOfMaterialsID", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Bill of materials ID")]
        public int BillOfMaterialsID { get; set; } // BillOfMaterialsID (Primary key)

        ///<summary>
        /// Parent product identification number. Foreign key to Product.ProductID.
        ///</summary>
        [Column(@"ProductAssemblyID", Order = 2, TypeName = "int")]
        [Index(@"AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate", 1, IsUnique = true, IsClustered = false)]
        [Display(Name = "Product assembly ID")]
        public int? ProductAssemblyID { get; set; } // ProductAssemblyID

        ///<summary>
        /// Component identification number. Foreign key to Product.ProductID.
        ///</summary>
        [Column(@"ComponentID", Order = 3, TypeName = "int")]
        [Index(@"AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate", 2, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Component ID")]
        public int ComponentID { get; set; } // ComponentID

        ///<summary>
        /// Date the component started being used in the assembly item.
        ///</summary>
        [Column(@"StartDate", Order = 4, TypeName = "datetime")]
        [Index(@"AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate", 3, IsUnique = true, IsClustered = false)]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // StartDate

        ///<summary>
        /// Date the component stopped being used in the assembly item.
        ///</summary>
        [Column(@"EndDate", Order = 5, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "End date")]
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Standard code identifying the unit of measure for the quantity.
        ///</summary>
        [Column(@"UnitMeasureCode", Order = 6, TypeName = "nchar")]
        [Index(@"IX_BillOfMaterials_UnitMeasureCode", 1, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "Unit measure code")]
        public string UnitMeasureCode { get; set; } // UnitMeasureCode (length: 3)

        ///<summary>
        /// Indicates the depth the component is from its parent (AssemblyID).
        ///</summary>
        [Column(@"BOMLevel", Order = 7, TypeName = "smallint")]
        [Required]
        [Display(Name = "Boml evel")]
        public short BOMLevel { get; set; } // BOMLevel

        ///<summary>
        /// Quantity of the component needed to create the assembly.
        ///</summary>
        [Column(@"PerAssemblyQty", Order = 8, TypeName = "decimal")]
        [Required]
        [Display(Name = "Per assembly qty")]
        public decimal PerAssemblyQty { get; set; } // PerAssemblyQty

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 9, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Production_Product pointed by [BillOfMaterials].([ComponentID]) (FK_BillOfMaterials_Product_ComponentID)
        /// </summary>
        [ForeignKey("ComponentID"), Required] public virtual Production_Product Component { get; set; } // FK_BillOfMaterials_Product_ComponentID

        /// <summary>
        /// Parent Production_Product pointed by [BillOfMaterials].([ProductAssemblyID]) (FK_BillOfMaterials_Product_ProductAssemblyID)
        /// </summary>
        [ForeignKey("ProductAssemblyID")] public virtual Production_Product ProductAssembly { get; set; } // FK_BillOfMaterials_Product_ProductAssemblyID

        /// <summary>
        /// Parent Production_UnitMeasure pointed by [BillOfMaterials].([UnitMeasureCode]) (FK_BillOfMaterials_UnitMeasure_UnitMeasureCode)
        /// </summary>
        [ForeignKey("UnitMeasureCode"), Required] public virtual Production_UnitMeasure Production_UnitMeasure { get; set; } // FK_BillOfMaterials_UnitMeasure_UnitMeasureCode

        public Production_BillOfMaterial()
        {
            StartDate = System.DateTime.Now;
            PerAssemblyQty = 1.00m;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Culture
    ///<summary>
    /// Lookup table containing the languages in which some AdventureWorks data is stored.
    ///</summary>
    [Table("Culture", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_Culture
    {

        ///<summary>
        /// Primary key for Culture records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CultureID", Order = 1, TypeName = "nchar")]
        [Index(@"PK_Culture_CultureID", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(6)]
        [StringLength(6)]
        [Key]
        [Display(Name = "Culture ID")]
        public string CultureID { get; set; } // CultureID (Primary key) (length: 6)

        ///<summary>
        /// Culture description.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_Culture_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Production_ProductModelProductDescriptionCultures where [ProductModelProductDescriptionCulture].[CultureID] point to this entity (FK_ProductModelProductDescriptionCulture_Culture_CultureID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_ProductModelProductDescriptionCulture> Production_ProductModelProductDescriptionCultures { get; set; } // ProductModelProductDescriptionCulture.FK_ProductModelProductDescriptionCulture_Culture_CultureID

        public Production_Culture()
        {
            ModifiedDate = System.DateTime.Now;
            Production_ProductModelProductDescriptionCultures = new System.Collections.Generic.List<Production_ProductModelProductDescriptionCulture>();
        }
    }

    // Document
    ///<summary>
    /// Product maintenance documents.
    ///</summary>
    [Table("Document", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_Document
    {

        ///<summary>
        /// Primary key for Document records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"DocumentNode", Order = 1, TypeName = "hierarchyid")]
        [Index(@"PK_Document_DocumentNode", 1, IsUnique = true, IsClustered = true)]
        [Index(@"AK_Document_DocumentLevel_DocumentNode", 2, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Document node")]
        public System.Data.Entity.Hierarchy.HierarchyId DocumentNode { get; set; } // DocumentNode (Primary key)

        ///<summary>
        /// Depth in the document hierarchy.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"DocumentLevel", Order = 2, TypeName = "smallint")]
        [Index(@"AK_Document_DocumentLevel_DocumentNode", 1, IsUnique = true, IsClustered = false)]
        [Display(Name = "Document level")]
        public short? DocumentLevel { get; private set; } // DocumentLevel

        ///<summary>
        /// Title of the document.
        ///</summary>
        [Column(@"Title", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Title")]
        public string Title { get; set; } // Title (length: 50)

        ///<summary>
        /// Employee who controls the document.  Foreign key to Employee.BusinessEntityID
        ///</summary>
        [Column(@"Owner", Order = 4, TypeName = "int")]
        [Required]
        [Display(Name = "Owner")]
        public int Owner { get; set; } // Owner

        ///<summary>
        /// 0 = This is a folder, 1 = This is a document.
        ///</summary>
        [Column(@"FolderFlag", Order = 5, TypeName = "bit")]
        [Required]
        [Display(Name = "Folder flag")]
        public bool FolderFlag { get; set; } // FolderFlag

        ///<summary>
        /// File name of the document
        ///</summary>
        [Column(@"FileName", Order = 6, TypeName = "nvarchar")]
        [Index(@"IX_Document_FileName_Revision", 1, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(400)]
        [StringLength(400)]
        [Display(Name = "File name")]
        public string FileName { get; set; } // FileName (length: 400)

        ///<summary>
        /// File extension indicating the document type. For example, .doc or .txt.
        ///</summary>
        [Column(@"FileExtension", Order = 7, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(8)]
        [StringLength(8)]
        [Display(Name = "File extension")]
        public string FileExtension { get; set; } // FileExtension (length: 8)

        ///<summary>
        /// Revision number of the document.
        ///</summary>
        [Column(@"Revision", Order = 8, TypeName = "nchar")]
        [Index(@"IX_Document_FileName_Revision", 2, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(5)]
        [StringLength(5)]
        [Display(Name = "Revision")]
        public string Revision { get; set; } // Revision (length: 5)

        ///<summary>
        /// Engineering change approval number.
        ///</summary>
        [Column(@"ChangeNumber", Order = 9, TypeName = "int")]
        [Required]
        [Display(Name = "Change number")]
        public int ChangeNumber { get; set; } // ChangeNumber

        ///<summary>
        /// 1 = Pending approval, 2 = Approved, 3 = Obsolete
        ///</summary>
        [Column(@"Status", Order = 10, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Status")]
        public byte Status { get; set; } // Status

        ///<summary>
        /// Document abstract.
        ///</summary>
        [Column(@"DocumentSummary", Order = 11, TypeName = "nvarchar(max)")]
        [Display(Name = "Document summary")]
        public string DocumentSummary { get; set; } // DocumentSummary

        ///<summary>
        /// Complete document.
        ///</summary>
        [Column(@"Document", Order = 12, TypeName = "varbinary(max)")]
        [Display(Name = "Document")]
        public byte[] Document { get; set; } // Document

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Required for FileStream.
        ///</summary>
        [Column(@"rowguid", Order = 13, TypeName = "uniqueidentifier")]
        [Index(@"UQ__Document__F73921F744672977", 1, IsUnique = true, IsClustered = false)]
        [Index(@"AK_Document_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 14, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Production_ProductDocuments where [ProductDocument].[DocumentNode] point to this entity (FK_ProductDocument_Document_DocumentNode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_ProductDocument> Production_ProductDocuments { get; set; } // ProductDocument.FK_ProductDocument_Document_DocumentNode

        // Foreign keys

        /// <summary>
        /// Parent HumanResources_Employee pointed by [Document].([Owner]) (FK_Document_Employee_Owner)
        /// </summary>
        [ForeignKey("Owner"), Required] public virtual HumanResources_Employee HumanResources_Employee { get; set; } // FK_Document_Employee_Owner

        public Production_Document()
        {
            FolderFlag = false;
            ChangeNumber = 0;
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Production_ProductDocuments = new System.Collections.Generic.List<Production_ProductDocument>();
        }
    }

    // Illustration
    ///<summary>
    /// Bicycle assembly diagrams.
    ///</summary>
    [Table("Illustration", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_Illustration
    {

        ///<summary>
        /// Primary key for Illustration records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"IllustrationID", Order = 1, TypeName = "int")]
        [Index(@"PK_Illustration_IllustrationID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Illustration ID")]
        public int IllustrationID { get; set; } // IllustrationID (Primary key)

        ///<summary>
        /// Illustrations used in manufacturing instructions. Stored as XML.
        ///</summary>
        [Column(@"Diagram", Order = 2, TypeName = "xml")]
        [Display(Name = "Diagram")]
        public string Diagram { get; set; } // Diagram

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Production_ProductModelIllustrations where [ProductModelIllustration].[IllustrationID] point to this entity (FK_ProductModelIllustration_Illustration_IllustrationID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_ProductModelIllustration> Production_ProductModelIllustrations { get; set; } // ProductModelIllustration.FK_ProductModelIllustration_Illustration_IllustrationID

        public Production_Illustration()
        {
            ModifiedDate = System.DateTime.Now;
            Production_ProductModelIllustrations = new System.Collections.Generic.List<Production_ProductModelIllustration>();
        }
    }

    // Location
    ///<summary>
    /// Product inventory and manufacturing locations.
    ///</summary>
    [Table("Location", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_Location
    {

        ///<summary>
        /// Primary key for Location records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"LocationID", Order = 1, TypeName = "smallint")]
        [Index(@"PK_Location_LocationID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Location ID")]
        public short LocationID { get; set; } // LocationID (Primary key)

        ///<summary>
        /// Location description.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_Location_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Standard hourly cost of the manufacturing location.
        ///</summary>
        [Column(@"CostRate", Order = 3, TypeName = "smallmoney")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Cost rate")]
        public decimal CostRate { get; set; } // CostRate

        ///<summary>
        /// Work capacity (in hours) of the manufacturing location.
        ///</summary>
        [Column(@"Availability", Order = 4, TypeName = "decimal")]
        [Required]
        [Display(Name = "Availability")]
        public decimal Availability { get; set; } // Availability

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Production_ProductInventories where [ProductInventory].[LocationID] point to this entity (FK_ProductInventory_Location_LocationID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_ProductInventory> Production_ProductInventories { get; set; } // ProductInventory.FK_ProductInventory_Location_LocationID
        /// <summary>
        /// Child Production_WorkOrderRoutings where [WorkOrderRouting].[LocationID] point to this entity (FK_WorkOrderRouting_Location_LocationID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_WorkOrderRouting> Production_WorkOrderRoutings { get; set; } // WorkOrderRouting.FK_WorkOrderRouting_Location_LocationID

        public Production_Location()
        {
            CostRate = 0.00m;
            Availability = 0.00m;
            ModifiedDate = System.DateTime.Now;
            Production_ProductInventories = new System.Collections.Generic.List<Production_ProductInventory>();
            Production_WorkOrderRoutings = new System.Collections.Generic.List<Production_WorkOrderRouting>();
        }
    }

    // Product
    ///<summary>
    /// Products sold or used in the manfacturing of sold products.
    ///</summary>
    [Table("Product", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_Product
    {

        ///<summary>
        /// Primary key for Product records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ProductID", Order = 1, TypeName = "int")]
        [Index(@"PK_Product_ProductID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product ID")]
        public int ProductID { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Name of the product.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_Product_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Unique product identification number.
        ///</summary>
        [Column(@"ProductNumber", Order = 3, TypeName = "nvarchar")]
        [Index(@"AK_Product_ProductNumber", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "Product number")]
        public string ProductNumber { get; set; } // ProductNumber (length: 25)

        ///<summary>
        /// 0 = Product is purchased, 1 = Product is manufactured in-house.
        ///</summary>
        [Column(@"MakeFlag", Order = 4, TypeName = "bit")]
        [Required]
        [Display(Name = "Make flag")]
        public bool MakeFlag { get; set; } // MakeFlag

        ///<summary>
        /// 0 = Product is not a salable item. 1 = Product is salable.
        ///</summary>
        [Column(@"FinishedGoodsFlag", Order = 5, TypeName = "bit")]
        [Required]
        [Display(Name = "Finished goods flag")]
        public bool FinishedGoodsFlag { get; set; } // FinishedGoodsFlag

        ///<summary>
        /// Product color.
        ///</summary>
        [Column(@"Color", Order = 6, TypeName = "nvarchar")]
        [MaxLength(15)]
        [StringLength(15)]
        [Display(Name = "Color")]
        public string Color { get; set; } // Color (length: 15)

        ///<summary>
        /// Minimum inventory quantity.
        ///</summary>
        [Column(@"SafetyStockLevel", Order = 7, TypeName = "smallint")]
        [Required]
        [Display(Name = "Safety stock level")]
        public short SafetyStockLevel { get; set; } // SafetyStockLevel

        ///<summary>
        /// Inventory level that triggers a purchase order or work order.
        ///</summary>
        [Column(@"ReorderPoint", Order = 8, TypeName = "smallint")]
        [Required]
        [Display(Name = "Reorder point")]
        public short ReorderPoint { get; set; } // ReorderPoint

        ///<summary>
        /// Standard cost of the product.
        ///</summary>
        [Column(@"StandardCost", Order = 9, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Standard cost")]
        public decimal StandardCost { get; set; } // StandardCost

        ///<summary>
        /// Selling price.
        ///</summary>
        [Column(@"ListPrice", Order = 10, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "List price")]
        public decimal ListPrice { get; set; } // ListPrice

        ///<summary>
        /// Product size.
        ///</summary>
        [Column(@"Size", Order = 11, TypeName = "nvarchar")]
        [MaxLength(5)]
        [StringLength(5)]
        [Display(Name = "Size")]
        public string Size { get; set; } // Size (length: 5)

        ///<summary>
        /// Unit of measure for Size column.
        ///</summary>
        [Column(@"SizeUnitMeasureCode", Order = 12, TypeName = "nchar")]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "Size unit measure code")]
        public string SizeUnitMeasureCode { get; set; } // SizeUnitMeasureCode (length: 3)

        ///<summary>
        /// Unit of measure for Weight column.
        ///</summary>
        [Column(@"WeightUnitMeasureCode", Order = 13, TypeName = "nchar")]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "Weight unit measure code")]
        public string WeightUnitMeasureCode { get; set; } // WeightUnitMeasureCode (length: 3)

        ///<summary>
        /// Product weight.
        ///</summary>
        [Column(@"Weight", Order = 14, TypeName = "decimal")]
        [Display(Name = "Weight")]
        public decimal? Weight { get; set; } // Weight

        ///<summary>
        /// Number of days required to manufacture the product.
        ///</summary>
        [Column(@"DaysToManufacture", Order = 15, TypeName = "int")]
        [Required]
        [Display(Name = "Days to manufacture")]
        public int DaysToManufacture { get; set; } // DaysToManufacture

        ///<summary>
        /// R = Road, M = Mountain, T = Touring, S = Standard
        ///</summary>
        [Column(@"ProductLine", Order = 16, TypeName = "nchar")]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "Product line")]
        public string ProductLine { get; set; } // ProductLine (length: 2)

        ///<summary>
        /// H = High, M = Medium, L = Low
        ///</summary>
        [Column(@"Class", Order = 17, TypeName = "nchar")]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "Class")]
        public string Class { get; set; } // Class (length: 2)

        ///<summary>
        /// W = Womens, M = Mens, U = Universal
        ///</summary>
        [Column(@"Style", Order = 18, TypeName = "nchar")]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "Style")]
        public string Style { get; set; } // Style (length: 2)

        ///<summary>
        /// Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID.
        ///</summary>
        [Column(@"ProductSubcategoryID", Order = 19, TypeName = "int")]
        [Display(Name = "Product subcategory ID")]
        public int? ProductSubcategoryID { get; set; } // ProductSubcategoryID

        ///<summary>
        /// Product is a member of this product model. Foreign key to ProductModel.ProductModelID.
        ///</summary>
        [Column(@"ProductModelID", Order = 20, TypeName = "int")]
        [Display(Name = "Product model ID")]
        public int? ProductModelID { get; set; } // ProductModelID

        ///<summary>
        /// Date the product was available for sale.
        ///</summary>
        [Column(@"SellStartDate", Order = 21, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Sell start date")]
        public System.DateTime SellStartDate { get; set; } // SellStartDate

        ///<summary>
        /// Date the product was no longer available for sale.
        ///</summary>
        [Column(@"SellEndDate", Order = 22, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Sell end date")]
        public System.DateTime? SellEndDate { get; set; } // SellEndDate

        ///<summary>
        /// Date the product was discontinued.
        ///</summary>
        [Column(@"DiscontinuedDate", Order = 23, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Discontinued date")]
        public System.DateTime? DiscontinuedDate { get; set; } // DiscontinuedDate

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 24, TypeName = "uniqueidentifier")]
        [Index(@"AK_Product_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 25, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Production_BillOfMaterials where [BillOfMaterials].[ComponentID] point to this entity (FK_BillOfMaterials_Product_ComponentID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_BillOfMaterial> Production_BillOfMaterials_ComponentID { get; set; } // BillOfMaterials.FK_BillOfMaterials_Product_ComponentID
        /// <summary>
        /// Child Production_BillOfMaterials where [BillOfMaterials].[ProductAssemblyID] point to this entity (FK_BillOfMaterials_Product_ProductAssemblyID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_BillOfMaterial> Production_BillOfMaterials_ProductAssemblyID { get; set; } // BillOfMaterials.FK_BillOfMaterials_Product_ProductAssemblyID
        /// <summary>
        /// Child Production_ProductCostHistories where [ProductCostHistory].[ProductID] point to this entity (FK_ProductCostHistory_Product_ProductID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_ProductCostHistory> Production_ProductCostHistories { get; set; } // ProductCostHistory.FK_ProductCostHistory_Product_ProductID
        /// <summary>
        /// Child Production_ProductDocuments where [ProductDocument].[ProductID] point to this entity (FK_ProductDocument_Product_ProductID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_ProductDocument> Production_ProductDocuments { get; set; } // ProductDocument.FK_ProductDocument_Product_ProductID
        /// <summary>
        /// Child Production_ProductInventories where [ProductInventory].[ProductID] point to this entity (FK_ProductInventory_Product_ProductID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_ProductInventory> Production_ProductInventories { get; set; } // ProductInventory.FK_ProductInventory_Product_ProductID
        /// <summary>
        /// Child Production_ProductListPriceHistories where [ProductListPriceHistory].[ProductID] point to this entity (FK_ProductListPriceHistory_Product_ProductID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_ProductListPriceHistory> Production_ProductListPriceHistories { get; set; } // ProductListPriceHistory.FK_ProductListPriceHistory_Product_ProductID
        /// <summary>
        /// Child Production_ProductProductPhotoes where [ProductProductPhoto].[ProductID] point to this entity (FK_ProductProductPhoto_Product_ProductID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_ProductProductPhoto> Production_ProductProductPhotoes { get; set; } // ProductProductPhoto.FK_ProductProductPhoto_Product_ProductID
        /// <summary>
        /// Child Production_ProductReviews where [ProductReview].[ProductID] point to this entity (FK_ProductReview_Product_ProductID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_ProductReview> Production_ProductReviews { get; set; } // ProductReview.FK_ProductReview_Product_ProductID
        /// <summary>
        /// Child Production_TransactionHistories where [TransactionHistory].[ProductID] point to this entity (FK_TransactionHistory_Product_ProductID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_TransactionHistory> Production_TransactionHistories { get; set; } // TransactionHistory.FK_TransactionHistory_Product_ProductID
        /// <summary>
        /// Child Production_WorkOrders where [WorkOrder].[ProductID] point to this entity (FK_WorkOrder_Product_ProductID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_WorkOrder> Production_WorkOrders { get; set; } // WorkOrder.FK_WorkOrder_Product_ProductID
        /// <summary>
        /// Child Purchasing_ProductVendors where [ProductVendor].[ProductID] point to this entity (FK_ProductVendor_Product_ProductID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Purchasing_ProductVendor> Purchasing_ProductVendors { get; set; } // ProductVendor.FK_ProductVendor_Product_ProductID
        /// <summary>
        /// Child Purchasing_PurchaseOrderDetails where [PurchaseOrderDetail].[ProductID] point to this entity (FK_PurchaseOrderDetail_Product_ProductID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Purchasing_PurchaseOrderDetail> Purchasing_PurchaseOrderDetails { get; set; } // PurchaseOrderDetail.FK_PurchaseOrderDetail_Product_ProductID
        /// <summary>
        /// Child Sales_ShoppingCartItems where [ShoppingCartItem].[ProductID] point to this entity (FK_ShoppingCartItem_Product_ProductID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_ShoppingCartItem> Sales_ShoppingCartItems { get; set; } // ShoppingCartItem.FK_ShoppingCartItem_Product_ProductID
        /// <summary>
        /// Child Sales_SpecialOfferProducts where [SpecialOfferProduct].[ProductID] point to this entity (FK_SpecialOfferProduct_Product_ProductID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SpecialOfferProduct> Sales_SpecialOfferProducts { get; set; } // SpecialOfferProduct.FK_SpecialOfferProduct_Product_ProductID

        // Foreign keys

        /// <summary>
        /// Parent Production_ProductModel pointed by [Product].([ProductModelID]) (FK_Product_ProductModel_ProductModelID)
        /// </summary>
        [ForeignKey("ProductModelID")] public virtual Production_ProductModel Production_ProductModel { get; set; } // FK_Product_ProductModel_ProductModelID

        /// <summary>
        /// Parent Production_ProductSubcategory pointed by [Product].([ProductSubcategoryID]) (FK_Product_ProductSubcategory_ProductSubcategoryID)
        /// </summary>
        [ForeignKey("ProductSubcategoryID")] public virtual Production_ProductSubcategory Production_ProductSubcategory { get; set; } // FK_Product_ProductSubcategory_ProductSubcategoryID

        /// <summary>
        /// Parent Production_UnitMeasure pointed by [Product].([SizeUnitMeasureCode]) (FK_Product_UnitMeasure_SizeUnitMeasureCode)
        /// </summary>
        [ForeignKey("SizeUnitMeasureCode")] public virtual Production_UnitMeasure Production_UnitMeasure_SizeUnitMeasureCode { get; set; } // FK_Product_UnitMeasure_SizeUnitMeasureCode

        /// <summary>
        /// Parent Production_UnitMeasure pointed by [Product].([WeightUnitMeasureCode]) (FK_Product_UnitMeasure_WeightUnitMeasureCode)
        /// </summary>
        [ForeignKey("WeightUnitMeasureCode")] public virtual Production_UnitMeasure Production_UnitMeasure_WeightUnitMeasureCode { get; set; } // FK_Product_UnitMeasure_WeightUnitMeasureCode

        public Production_Product()
        {
            MakeFlag = true;
            FinishedGoodsFlag = true;
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Production_BillOfMaterials_ComponentID = new System.Collections.Generic.List<Production_BillOfMaterial>();
            Production_BillOfMaterials_ProductAssemblyID = new System.Collections.Generic.List<Production_BillOfMaterial>();
            Production_ProductCostHistories = new System.Collections.Generic.List<Production_ProductCostHistory>();
            Production_ProductDocuments = new System.Collections.Generic.List<Production_ProductDocument>();
            Production_ProductInventories = new System.Collections.Generic.List<Production_ProductInventory>();
            Production_ProductListPriceHistories = new System.Collections.Generic.List<Production_ProductListPriceHistory>();
            Production_ProductProductPhotoes = new System.Collections.Generic.List<Production_ProductProductPhoto>();
            Production_ProductReviews = new System.Collections.Generic.List<Production_ProductReview>();
            Purchasing_ProductVendors = new System.Collections.Generic.List<Purchasing_ProductVendor>();
            Purchasing_PurchaseOrderDetails = new System.Collections.Generic.List<Purchasing_PurchaseOrderDetail>();
            Sales_ShoppingCartItems = new System.Collections.Generic.List<Sales_ShoppingCartItem>();
            Sales_SpecialOfferProducts = new System.Collections.Generic.List<Sales_SpecialOfferProduct>();
            Production_TransactionHistories = new System.Collections.Generic.List<Production_TransactionHistory>();
            Production_WorkOrders = new System.Collections.Generic.List<Production_WorkOrder>();
        }
    }

    // ProductCategory
    ///<summary>
    /// High-level product categorization.
    ///</summary>
    [Table("ProductCategory", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductCategory
    {

        ///<summary>
        /// Primary key for ProductCategory records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ProductCategoryID", Order = 1, TypeName = "int")]
        [Index(@"PK_ProductCategory_ProductCategoryID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product category ID")]
        public int ProductCategoryID { get; set; } // ProductCategoryID (Primary key)

        ///<summary>
        /// Category description.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_ProductCategory_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 3, TypeName = "uniqueidentifier")]
        [Index(@"AK_ProductCategory_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Production_ProductSubcategories where [ProductSubcategory].[ProductCategoryID] point to this entity (FK_ProductSubcategory_ProductCategory_ProductCategoryID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_ProductSubcategory> Production_ProductSubcategories { get; set; } // ProductSubcategory.FK_ProductSubcategory_ProductCategory_ProductCategoryID

        public Production_ProductCategory()
        {
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Production_ProductSubcategories = new System.Collections.Generic.List<Production_ProductSubcategory>();
        }
    }

    // ProductCostHistory
    ///<summary>
    /// Changes in the cost of a product over time.
    ///</summary>
    [Table("ProductCostHistory", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductCostHistory
    {

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductID", Order = 1, TypeName = "int")]
        [Index(@"PK_ProductCostHistory_ProductID_StartDate", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product ID")]
        public int ProductID { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Product cost start date.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StartDate", Order = 2, TypeName = "datetime")]
        [Index(@"PK_ProductCostHistory_ProductID_StartDate", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [DataType(DataType.DateTime)]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)

        ///<summary>
        /// Product cost end date.
        ///</summary>
        [Column(@"EndDate", Order = 3, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "End date")]
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Standard cost of the product.
        ///</summary>
        [Column(@"StandardCost", Order = 4, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Standard cost")]
        public decimal StandardCost { get; set; } // StandardCost

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Production_Product pointed by [ProductCostHistory].([ProductID]) (FK_ProductCostHistory_Product_ProductID)
        /// </summary>
        [ForeignKey("ProductID"), Required] public virtual Production_Product Production_Product { get; set; } // FK_ProductCostHistory_Product_ProductID

        public Production_ProductCostHistory()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductDescription
    ///<summary>
    /// Product descriptions in several languages.
    ///</summary>
    [Table("ProductDescription", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductDescription
    {

        ///<summary>
        /// Primary key for ProductDescription records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ProductDescriptionID", Order = 1, TypeName = "int")]
        [Index(@"PK_ProductDescription_ProductDescriptionID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product description ID")]
        public int ProductDescriptionID { get; set; } // ProductDescriptionID (Primary key)

        ///<summary>
        /// Description of the product.
        ///</summary>
        [Column(@"Description", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(400)]
        [StringLength(400)]
        [Display(Name = "Description")]
        public string Description { get; set; } // Description (length: 400)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 3, TypeName = "uniqueidentifier")]
        [Index(@"AK_ProductDescription_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Production_ProductModelProductDescriptionCultures where [ProductModelProductDescriptionCulture].[ProductDescriptionID] point to this entity (FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_ProductModelProductDescriptionCulture> Production_ProductModelProductDescriptionCultures { get; set; } // ProductModelProductDescriptionCulture.FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID

        public Production_ProductDescription()
        {
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Production_ProductModelProductDescriptionCultures = new System.Collections.Generic.List<Production_ProductModelProductDescriptionCulture>();
        }
    }

    // ProductDocument
    ///<summary>
    /// Cross-reference table mapping products to related product documents.
    ///</summary>
    [Table("ProductDocument", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductDocument
    {

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductID", Order = 1, TypeName = "int")]
        [Index(@"PK_ProductDocument_ProductID_DocumentNode", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product ID")]
        public int ProductID { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Document identification number. Foreign key to Document.DocumentNode.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"DocumentNode", Order = 2, TypeName = "hierarchyid")]
        [Index(@"PK_ProductDocument_ProductID_DocumentNode", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Document node")]
        public System.Data.Entity.Hierarchy.HierarchyId DocumentNode { get; set; } // DocumentNode (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Production_Document pointed by [ProductDocument].([DocumentNode]) (FK_ProductDocument_Document_DocumentNode)
        /// </summary>
        [ForeignKey("DocumentNode"), Required] public virtual Production_Document Production_Document { get; set; } // FK_ProductDocument_Document_DocumentNode

        /// <summary>
        /// Parent Production_Product pointed by [ProductDocument].([ProductID]) (FK_ProductDocument_Product_ProductID)
        /// </summary>
        [ForeignKey("ProductID"), Required] public virtual Production_Product Production_Product { get; set; } // FK_ProductDocument_Product_ProductID

        public Production_ProductDocument()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductInventory
    ///<summary>
    /// Product inventory information.
    ///</summary>
    [Table("ProductInventory", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductInventory
    {

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductID", Order = 1, TypeName = "int")]
        [Index(@"PK_ProductInventory_ProductID_LocationID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product ID")]
        public int ProductID { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Inventory location identification number. Foreign key to Location.LocationID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"LocationID", Order = 2, TypeName = "smallint")]
        [Index(@"PK_ProductInventory_ProductID_LocationID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Location ID")]
        public short LocationID { get; set; } // LocationID (Primary key)

        ///<summary>
        /// Storage compartment within an inventory location.
        ///</summary>
        [Column(@"Shelf", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Shelf")]
        public string Shelf { get; set; } // Shelf (length: 10)

        ///<summary>
        /// Storage container on a shelf in an inventory location.
        ///</summary>
        [Column(@"Bin", Order = 4, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Bin")]
        public byte Bin { get; set; } // Bin

        ///<summary>
        /// Quantity of products in the inventory location.
        ///</summary>
        [Column(@"Quantity", Order = 5, TypeName = "smallint")]
        [Required]
        [Display(Name = "Quantity")]
        public short Quantity { get; set; } // Quantity

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 6, TypeName = "uniqueidentifier")]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 7, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Production_Location pointed by [ProductInventory].([LocationID]) (FK_ProductInventory_Location_LocationID)
        /// </summary>
        [ForeignKey("LocationID"), Required] public virtual Production_Location Production_Location { get; set; } // FK_ProductInventory_Location_LocationID

        /// <summary>
        /// Parent Production_Product pointed by [ProductInventory].([ProductID]) (FK_ProductInventory_Product_ProductID)
        /// </summary>
        [ForeignKey("ProductID"), Required] public virtual Production_Product Production_Product { get; set; } // FK_ProductInventory_Product_ProductID

        public Production_ProductInventory()
        {
            Quantity = 0;
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductListPriceHistory
    ///<summary>
    /// Changes in the list price of a product over time.
    ///</summary>
    [Table("ProductListPriceHistory", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductListPriceHistory
    {

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductID", Order = 1, TypeName = "int")]
        [Index(@"PK_ProductListPriceHistory_ProductID_StartDate", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product ID")]
        public int ProductID { get; set; } // ProductID (Primary key)

        ///<summary>
        /// List price start date.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StartDate", Order = 2, TypeName = "datetime")]
        [Index(@"PK_ProductListPriceHistory_ProductID_StartDate", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [DataType(DataType.DateTime)]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)

        ///<summary>
        /// List price end date
        ///</summary>
        [Column(@"EndDate", Order = 3, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "End date")]
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Product list price.
        ///</summary>
        [Column(@"ListPrice", Order = 4, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "List price")]
        public decimal ListPrice { get; set; } // ListPrice

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Production_Product pointed by [ProductListPriceHistory].([ProductID]) (FK_ProductListPriceHistory_Product_ProductID)
        /// </summary>
        [ForeignKey("ProductID"), Required] public virtual Production_Product Production_Product { get; set; } // FK_ProductListPriceHistory_Product_ProductID

        public Production_ProductListPriceHistory()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductModel
    ///<summary>
    /// Product model classification.
    ///</summary>
    [Table("ProductModel", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductModel
    {

        ///<summary>
        /// Primary key for ProductModel records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ProductModelID", Order = 1, TypeName = "int")]
        [Index(@"PK_ProductModel_ProductModelID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product model ID")]
        public int ProductModelID { get; set; } // ProductModelID (Primary key)

        ///<summary>
        /// Product model description.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_ProductModel_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Detailed product catalog information in xml format.
        ///</summary>
        [Column(@"CatalogDescription", Order = 3, TypeName = "xml")]
        [Display(Name = "Catalog description")]
        public string CatalogDescription { get; set; } // CatalogDescription

        ///<summary>
        /// Manufacturing instructions in xml format.
        ///</summary>
        [Column(@"Instructions", Order = 4, TypeName = "xml")]
        [Display(Name = "Instructions")]
        public string Instructions { get; set; } // Instructions

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 5, TypeName = "uniqueidentifier")]
        [Index(@"AK_ProductModel_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Production_Products where [Product].[ProductModelID] point to this entity (FK_Product_ProductModel_ProductModelID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_Product> Production_Products { get; set; } // Product.FK_Product_ProductModel_ProductModelID
        /// <summary>
        /// Child Production_ProductModelIllustrations where [ProductModelIllustration].[ProductModelID] point to this entity (FK_ProductModelIllustration_ProductModel_ProductModelID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_ProductModelIllustration> Production_ProductModelIllustrations { get; set; } // ProductModelIllustration.FK_ProductModelIllustration_ProductModel_ProductModelID
        /// <summary>
        /// Child Production_ProductModelProductDescriptionCultures where [ProductModelProductDescriptionCulture].[ProductModelID] point to this entity (FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_ProductModelProductDescriptionCulture> Production_ProductModelProductDescriptionCultures { get; set; } // ProductModelProductDescriptionCulture.FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID

        public Production_ProductModel()
        {
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Production_Products = new System.Collections.Generic.List<Production_Product>();
            Production_ProductModelIllustrations = new System.Collections.Generic.List<Production_ProductModelIllustration>();
            Production_ProductModelProductDescriptionCultures = new System.Collections.Generic.List<Production_ProductModelProductDescriptionCulture>();
        }
    }

    // ProductModelIllustration
    ///<summary>
    /// Cross-reference table mapping product models and illustrations.
    ///</summary>
    [Table("ProductModelIllustration", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductModelIllustration
    {

        ///<summary>
        /// Primary key. Foreign key to ProductModel.ProductModelID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductModelID", Order = 1, TypeName = "int")]
        [Index(@"PK_ProductModelIllustration_ProductModelID_IllustrationID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product model ID")]
        public int ProductModelID { get; set; } // ProductModelID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Illustration.IllustrationID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"IllustrationID", Order = 2, TypeName = "int")]
        [Index(@"PK_ProductModelIllustration_ProductModelID_IllustrationID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Illustration ID")]
        public int IllustrationID { get; set; } // IllustrationID (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Production_Illustration pointed by [ProductModelIllustration].([IllustrationID]) (FK_ProductModelIllustration_Illustration_IllustrationID)
        /// </summary>
        [ForeignKey("IllustrationID"), Required] public virtual Production_Illustration Production_Illustration { get; set; } // FK_ProductModelIllustration_Illustration_IllustrationID

        /// <summary>
        /// Parent Production_ProductModel pointed by [ProductModelIllustration].([ProductModelID]) (FK_ProductModelIllustration_ProductModel_ProductModelID)
        /// </summary>
        [ForeignKey("ProductModelID"), Required] public virtual Production_ProductModel Production_ProductModel { get; set; } // FK_ProductModelIllustration_ProductModel_ProductModelID

        public Production_ProductModelIllustration()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductModelProductDescriptionCulture
    ///<summary>
    /// Cross-reference table mapping product descriptions and the language the description is written in.
    ///</summary>
    [Table("ProductModelProductDescriptionCulture", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductModelProductDescriptionCulture
    {

        ///<summary>
        /// Primary key. Foreign key to ProductModel.ProductModelID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductModelID", Order = 1, TypeName = "int")]
        [Index(@"PK_ProductModelProductDescriptionCulture_ProductModelID_ProductDescriptionID_CultureID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product model ID")]
        public int ProductModelID { get; set; } // ProductModelID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to ProductDescription.ProductDescriptionID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductDescriptionID", Order = 2, TypeName = "int")]
        [Index(@"PK_ProductModelProductDescriptionCulture_ProductModelID_ProductDescriptionID_CultureID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product description ID")]
        public int ProductDescriptionID { get; set; } // ProductDescriptionID (Primary key)

        ///<summary>
        /// Culture identification number. Foreign key to Culture.CultureID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CultureID", Order = 3, TypeName = "nchar")]
        [Index(@"PK_ProductModelProductDescriptionCulture_ProductModelID_ProductDescriptionID_CultureID", 3, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(6)]
        [StringLength(6)]
        [Key]
        [Display(Name = "Culture ID")]
        public string CultureID { get; set; } // CultureID (Primary key) (length: 6)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Production_Culture pointed by [ProductModelProductDescriptionCulture].([CultureID]) (FK_ProductModelProductDescriptionCulture_Culture_CultureID)
        /// </summary>
        [ForeignKey("CultureID"), Required] public virtual Production_Culture Production_Culture { get; set; } // FK_ProductModelProductDescriptionCulture_Culture_CultureID

        /// <summary>
        /// Parent Production_ProductDescription pointed by [ProductModelProductDescriptionCulture].([ProductDescriptionID]) (FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID)
        /// </summary>
        [ForeignKey("ProductDescriptionID"), Required] public virtual Production_ProductDescription Production_ProductDescription { get; set; } // FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID

        /// <summary>
        /// Parent Production_ProductModel pointed by [ProductModelProductDescriptionCulture].([ProductModelID]) (FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID)
        /// </summary>
        [ForeignKey("ProductModelID"), Required] public virtual Production_ProductModel Production_ProductModel { get; set; } // FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID

        public Production_ProductModelProductDescriptionCulture()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductPhoto
    ///<summary>
    /// Product images.
    ///</summary>
    [Table("ProductPhoto", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductPhoto
    {

        ///<summary>
        /// Primary key for ProductPhoto records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ProductPhotoID", Order = 1, TypeName = "int")]
        [Index(@"PK_ProductPhoto_ProductPhotoID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product photo ID")]
        public int ProductPhotoID { get; set; } // ProductPhotoID (Primary key)

        ///<summary>
        /// Small image of the product.
        ///</summary>
        [Column(@"ThumbNailPhoto", Order = 2, TypeName = "varbinary(max)")]
        [Display(Name = "Thumb nail photo")]
        public byte[] ThumbNailPhoto { get; set; } // ThumbNailPhoto

        ///<summary>
        /// Small image file name.
        ///</summary>
        [Column(@"ThumbnailPhotoFileName", Order = 3, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Thumbnail photo file name")]
        public string ThumbnailPhotoFileName { get; set; } // ThumbnailPhotoFileName (length: 50)

        ///<summary>
        /// Large image of the product.
        ///</summary>
        [Column(@"LargePhoto", Order = 4, TypeName = "varbinary(max)")]
        [Display(Name = "Large photo")]
        public byte[] LargePhoto { get; set; } // LargePhoto

        ///<summary>
        /// Large image file name.
        ///</summary>
        [Column(@"LargePhotoFileName", Order = 5, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Large photo file name")]
        public string LargePhotoFileName { get; set; } // LargePhotoFileName (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Production_ProductProductPhotoes where [ProductProductPhoto].[ProductPhotoID] point to this entity (FK_ProductProductPhoto_ProductPhoto_ProductPhotoID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_ProductProductPhoto> Production_ProductProductPhotoes { get; set; } // ProductProductPhoto.FK_ProductProductPhoto_ProductPhoto_ProductPhotoID

        public Production_ProductPhoto()
        {
            ModifiedDate = System.DateTime.Now;
            Production_ProductProductPhotoes = new System.Collections.Generic.List<Production_ProductProductPhoto>();
        }
    }

    // ProductProductPhoto
    ///<summary>
    /// Cross-reference table mapping products and product photos.
    ///</summary>
    [Table("ProductProductPhoto", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductProductPhoto
    {

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductID", Order = 1, TypeName = "int")]
        [Index(@"PK_ProductProductPhoto_ProductID_ProductPhotoID", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Product ID")]
        public int ProductID { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductPhotoID", Order = 2, TypeName = "int")]
        [Index(@"PK_ProductProductPhoto_ProductID_ProductPhotoID", 2, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Product photo ID")]
        public int ProductPhotoID { get; set; } // ProductPhotoID (Primary key)

        ///<summary>
        /// 0 = Photo is not the principal image. 1 = Photo is the principal image.
        ///</summary>
        [Column(@"Primary", Order = 3, TypeName = "bit")]
        [Required]
        [Display(Name = "Primary")]
        public bool Primary { get; set; } // Primary

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Production_Product pointed by [ProductProductPhoto].([ProductID]) (FK_ProductProductPhoto_Product_ProductID)
        /// </summary>
        [ForeignKey("ProductID"), Required] public virtual Production_Product Production_Product { get; set; } // FK_ProductProductPhoto_Product_ProductID

        /// <summary>
        /// Parent Production_ProductPhoto pointed by [ProductProductPhoto].([ProductPhotoID]) (FK_ProductProductPhoto_ProductPhoto_ProductPhotoID)
        /// </summary>
        [ForeignKey("ProductPhotoID"), Required] public virtual Production_ProductPhoto Production_ProductPhoto { get; set; } // FK_ProductProductPhoto_ProductPhoto_ProductPhotoID

        public Production_ProductProductPhoto()
        {
            Primary = false;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductReview
    ///<summary>
    /// Customer reviews of products they have purchased.
    ///</summary>
    [Table("ProductReview", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductReview
    {

        ///<summary>
        /// Primary key for ProductReview records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ProductReviewID", Order = 1, TypeName = "int")]
        [Index(@"PK_ProductReview_ProductReviewID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product review ID")]
        public int ProductReviewID { get; set; } // ProductReviewID (Primary key)

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        [Column(@"ProductID", Order = 2, TypeName = "int")]
        [Index(@"IX_ProductReview_ProductID_Name", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Product ID")]
        public int ProductID { get; set; } // ProductID

        ///<summary>
        /// Name of the reviewer.
        ///</summary>
        [Column(@"ReviewerName", Order = 3, TypeName = "nvarchar")]
        [Index(@"IX_ProductReview_ProductID_Name", 2, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Reviewer name")]
        public string ReviewerName { get; set; } // ReviewerName (length: 50)

        ///<summary>
        /// Date review was submitted.
        ///</summary>
        [Column(@"ReviewDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Review date")]
        public System.DateTime ReviewDate { get; set; } // ReviewDate

        ///<summary>
        /// Reviewer&apos;s e-mail address.
        ///</summary>
        [Column(@"EmailAddress", Order = 5, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [EmailAddress]
        [Display(Name = "Email address")]
        public string EmailAddress { get; set; } // EmailAddress (length: 50)

        ///<summary>
        /// Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating.
        ///</summary>
        [Column(@"Rating", Order = 6, TypeName = "int")]
        [Required]
        [Display(Name = "Rating")]
        public int Rating { get; set; } // Rating

        ///<summary>
        /// Reviewer&apos;s comments
        ///</summary>
        [Column(@"Comments", Order = 7, TypeName = "nvarchar")]
        [MaxLength(3850)]
        [StringLength(3850)]
        [Display(Name = "Comments")]
        public string Comments { get; set; } // Comments (length: 3850)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 8, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Production_Product pointed by [ProductReview].([ProductID]) (FK_ProductReview_Product_ProductID)
        /// </summary>
        [ForeignKey("ProductID"), Required] public virtual Production_Product Production_Product { get; set; } // FK_ProductReview_Product_ProductID

        public Production_ProductReview()
        {
            ReviewDate = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductSubcategory
    ///<summary>
    /// Product subcategories. See ProductCategory table.
    ///</summary>
    [Table("ProductSubcategory", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductSubcategory
    {

        ///<summary>
        /// Primary key for ProductSubcategory records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ProductSubcategoryID", Order = 1, TypeName = "int")]
        [Index(@"PK_ProductSubcategory_ProductSubcategoryID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product subcategory ID")]
        public int ProductSubcategoryID { get; set; } // ProductSubcategoryID (Primary key)

        ///<summary>
        /// Product category identification number. Foreign key to ProductCategory.ProductCategoryID.
        ///</summary>
        [Column(@"ProductCategoryID", Order = 2, TypeName = "int")]
        [Required]
        [Display(Name = "Product category ID")]
        public int ProductCategoryID { get; set; } // ProductCategoryID

        ///<summary>
        /// Subcategory description.
        ///</summary>
        [Column(@"Name", Order = 3, TypeName = "nvarchar")]
        [Index(@"AK_ProductSubcategory_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 4, TypeName = "uniqueidentifier")]
        [Index(@"AK_ProductSubcategory_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Production_Products where [Product].[ProductSubcategoryID] point to this entity (FK_Product_ProductSubcategory_ProductSubcategoryID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_Product> Production_Products { get; set; } // Product.FK_Product_ProductSubcategory_ProductSubcategoryID

        // Foreign keys

        /// <summary>
        /// Parent Production_ProductCategory pointed by [ProductSubcategory].([ProductCategoryID]) (FK_ProductSubcategory_ProductCategory_ProductCategoryID)
        /// </summary>
        [ForeignKey("ProductCategoryID"), Required] public virtual Production_ProductCategory Production_ProductCategory { get; set; } // FK_ProductSubcategory_ProductCategory_ProductCategoryID

        public Production_ProductSubcategory()
        {
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Production_Products = new System.Collections.Generic.List<Production_Product>();
        }
    }

    // ScrapReason
    ///<summary>
    /// Manufacturing failure reasons lookup table.
    ///</summary>
    [Table("ScrapReason", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ScrapReason
    {

        ///<summary>
        /// Primary key for ScrapReason records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ScrapReasonID", Order = 1, TypeName = "smallint")]
        [Index(@"PK_ScrapReason_ScrapReasonID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Scrap reason ID")]
        public short ScrapReasonID { get; set; } // ScrapReasonID (Primary key)

        ///<summary>
        /// Failure description.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_ScrapReason_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Production_WorkOrders where [WorkOrder].[ScrapReasonID] point to this entity (FK_WorkOrder_ScrapReason_ScrapReasonID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_WorkOrder> Production_WorkOrders { get; set; } // WorkOrder.FK_WorkOrder_ScrapReason_ScrapReasonID

        public Production_ScrapReason()
        {
            ModifiedDate = System.DateTime.Now;
            Production_WorkOrders = new System.Collections.Generic.List<Production_WorkOrder>();
        }
    }

    // TransactionHistory
    ///<summary>
    /// Record of each purchase order, sales order, or work order transaction year to date.
    ///</summary>
    [Table("TransactionHistory", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_TransactionHistory
    {

        ///<summary>
        /// Primary key for TransactionHistory records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"TransactionID", Order = 1, TypeName = "int")]
        [Index(@"PK_TransactionHistory_TransactionID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Transaction ID")]
        public int TransactionID { get; set; } // TransactionID (Primary key)

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        [Column(@"ProductID", Order = 2, TypeName = "int")]
        [Index(@"IX_TransactionHistory_ProductID", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Product ID")]
        public int ProductID { get; set; } // ProductID

        ///<summary>
        /// Purchase order, sales order, or work order identification number.
        ///</summary>
        [Column(@"ReferenceOrderID", Order = 3, TypeName = "int")]
        [Index(@"IX_TransactionHistory_ReferenceOrderID_ReferenceOrderLineID", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Reference order ID")]
        public int ReferenceOrderID { get; set; } // ReferenceOrderID

        ///<summary>
        /// Line number associated with the purchase order, sales order, or work order.
        ///</summary>
        [Column(@"ReferenceOrderLineID", Order = 4, TypeName = "int")]
        [Index(@"IX_TransactionHistory_ReferenceOrderID_ReferenceOrderLineID", 2, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Reference order line ID")]
        public int ReferenceOrderLineID { get; set; } // ReferenceOrderLineID

        ///<summary>
        /// Date and time of the transaction.
        ///</summary>
        [Column(@"TransactionDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Transaction date")]
        public System.DateTime TransactionDate { get; set; } // TransactionDate

        ///<summary>
        /// W = WorkOrder, S = SalesOrder, P = PurchaseOrder
        ///</summary>
        [Column(@"TransactionType", Order = 6, TypeName = "nchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "Transaction type")]
        public string TransactionType { get; set; } // TransactionType (length: 1)

        ///<summary>
        /// Product quantity.
        ///</summary>
        [Column(@"Quantity", Order = 7, TypeName = "int")]
        [Required]
        [Display(Name = "Quantity")]
        public int Quantity { get; set; } // Quantity

        ///<summary>
        /// Product cost.
        ///</summary>
        [Column(@"ActualCost", Order = 8, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Actual cost")]
        public decimal ActualCost { get; set; } // ActualCost

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 9, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Production_Product pointed by [TransactionHistory].([ProductID]) (FK_TransactionHistory_Product_ProductID)
        /// </summary>
        [ForeignKey("ProductID"), Required] public virtual Production_Product Production_Product { get; set; } // FK_TransactionHistory_Product_ProductID

        public Production_TransactionHistory()
        {
            ReferenceOrderLineID = 0;
            TransactionDate = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // TransactionHistoryArchive
    ///<summary>
    /// Transactions for previous years.
    ///</summary>
    [Table("TransactionHistoryArchive", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_TransactionHistoryArchive
    {

        ///<summary>
        /// Primary key for TransactionHistoryArchive records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"TransactionID", Order = 1, TypeName = "int")]
        [Index(@"PK_TransactionHistoryArchive_TransactionID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Transaction ID")]
        public int TransactionID { get; set; } // TransactionID (Primary key)

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        [Column(@"ProductID", Order = 2, TypeName = "int")]
        [Index(@"IX_TransactionHistoryArchive_ProductID", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Product ID")]
        public int ProductID { get; set; } // ProductID

        ///<summary>
        /// Purchase order, sales order, or work order identification number.
        ///</summary>
        [Column(@"ReferenceOrderID", Order = 3, TypeName = "int")]
        [Index(@"IX_TransactionHistoryArchive_ReferenceOrderID_ReferenceOrderLineID", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Reference order ID")]
        public int ReferenceOrderID { get; set; } // ReferenceOrderID

        ///<summary>
        /// Line number associated with the purchase order, sales order, or work order.
        ///</summary>
        [Column(@"ReferenceOrderLineID", Order = 4, TypeName = "int")]
        [Index(@"IX_TransactionHistoryArchive_ReferenceOrderID_ReferenceOrderLineID", 2, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Reference order line ID")]
        public int ReferenceOrderLineID { get; set; } // ReferenceOrderLineID

        ///<summary>
        /// Date and time of the transaction.
        ///</summary>
        [Column(@"TransactionDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Transaction date")]
        public System.DateTime TransactionDate { get; set; } // TransactionDate

        ///<summary>
        /// W = Work Order, S = Sales Order, P = Purchase Order
        ///</summary>
        [Column(@"TransactionType", Order = 6, TypeName = "nchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "Transaction type")]
        public string TransactionType { get; set; } // TransactionType (length: 1)

        ///<summary>
        /// Product quantity.
        ///</summary>
        [Column(@"Quantity", Order = 7, TypeName = "int")]
        [Required]
        [Display(Name = "Quantity")]
        public int Quantity { get; set; } // Quantity

        ///<summary>
        /// Product cost.
        ///</summary>
        [Column(@"ActualCost", Order = 8, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Actual cost")]
        public decimal ActualCost { get; set; } // ActualCost

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 9, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        public Production_TransactionHistoryArchive()
        {
            ReferenceOrderLineID = 0;
            TransactionDate = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // UnitMeasure
    ///<summary>
    /// Unit of measure lookup table.
    ///</summary>
    [Table("UnitMeasure", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_UnitMeasure
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"UnitMeasureCode", Order = 1, TypeName = "nchar")]
        [Index(@"PK_UnitMeasure_UnitMeasureCode", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Key]
        [Display(Name = "Unit measure code")]
        public string UnitMeasureCode { get; set; } // UnitMeasureCode (Primary key) (length: 3)

        ///<summary>
        /// Unit of measure description.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_UnitMeasure_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Production_BillOfMaterials where [BillOfMaterials].[UnitMeasureCode] point to this entity (FK_BillOfMaterials_UnitMeasure_UnitMeasureCode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_BillOfMaterial> Production_BillOfMaterials { get; set; } // BillOfMaterials.FK_BillOfMaterials_UnitMeasure_UnitMeasureCode
        /// <summary>
        /// Child Production_Products where [Product].[SizeUnitMeasureCode] point to this entity (FK_Product_UnitMeasure_SizeUnitMeasureCode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_Product> Production_Products_SizeUnitMeasureCode { get; set; } // Product.FK_Product_UnitMeasure_SizeUnitMeasureCode
        /// <summary>
        /// Child Production_Products where [Product].[WeightUnitMeasureCode] point to this entity (FK_Product_UnitMeasure_WeightUnitMeasureCode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_Product> Production_Products_WeightUnitMeasureCode { get; set; } // Product.FK_Product_UnitMeasure_WeightUnitMeasureCode
        /// <summary>
        /// Child Purchasing_ProductVendors where [ProductVendor].[UnitMeasureCode] point to this entity (FK_ProductVendor_UnitMeasure_UnitMeasureCode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Purchasing_ProductVendor> Purchasing_ProductVendors { get; set; } // ProductVendor.FK_ProductVendor_UnitMeasure_UnitMeasureCode

        public Production_UnitMeasure()
        {
            ModifiedDate = System.DateTime.Now;
            Production_BillOfMaterials = new System.Collections.Generic.List<Production_BillOfMaterial>();
            Production_Products_SizeUnitMeasureCode = new System.Collections.Generic.List<Production_Product>();
            Production_Products_WeightUnitMeasureCode = new System.Collections.Generic.List<Production_Product>();
            Purchasing_ProductVendors = new System.Collections.Generic.List<Purchasing_ProductVendor>();
        }
    }

    // WorkOrder
    ///<summary>
    /// Manufacturing work orders.
    ///</summary>
    [Table("WorkOrder", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_WorkOrder
    {

        ///<summary>
        /// Primary key for WorkOrder records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"WorkOrderID", Order = 1, TypeName = "int")]
        [Index(@"PK_WorkOrder_WorkOrderID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Work order ID")]
        public int WorkOrderID { get; set; } // WorkOrderID (Primary key)

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        [Column(@"ProductID", Order = 2, TypeName = "int")]
        [Index(@"IX_WorkOrder_ProductID", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Product ID")]
        public int ProductID { get; set; } // ProductID

        ///<summary>
        /// Product quantity to build.
        ///</summary>
        [Column(@"OrderQty", Order = 3, TypeName = "int")]
        [Required]
        [Display(Name = "Order qty")]
        public int OrderQty { get; set; } // OrderQty

        ///<summary>
        /// Quantity built and put in inventory.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"StockedQty", Order = 4, TypeName = "int")]
        [Display(Name = "Stocked qty")]
        public int StockedQty { get; private set; } // StockedQty

        ///<summary>
        /// Quantity that failed inspection.
        ///</summary>
        [Column(@"ScrappedQty", Order = 5, TypeName = "smallint")]
        [Required]
        [Display(Name = "Scrapped qty")]
        public short ScrappedQty { get; set; } // ScrappedQty

        ///<summary>
        /// Work order start date.
        ///</summary>
        [Column(@"StartDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // StartDate

        ///<summary>
        /// Work order end date.
        ///</summary>
        [Column(@"EndDate", Order = 7, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "End date")]
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Work order due date.
        ///</summary>
        [Column(@"DueDate", Order = 8, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Due date")]
        public System.DateTime DueDate { get; set; } // DueDate

        ///<summary>
        /// Reason for inspection failure.
        ///</summary>
        [Column(@"ScrapReasonID", Order = 9, TypeName = "smallint")]
        [Index(@"IX_WorkOrder_ScrapReasonID", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Scrap reason ID")]
        public short? ScrapReasonID { get; set; } // ScrapReasonID

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 10, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Production_WorkOrderRoutings where [WorkOrderRouting].[WorkOrderID] point to this entity (FK_WorkOrderRouting_WorkOrder_WorkOrderID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_WorkOrderRouting> Production_WorkOrderRoutings { get; set; } // WorkOrderRouting.FK_WorkOrderRouting_WorkOrder_WorkOrderID

        // Foreign keys

        /// <summary>
        /// Parent Production_Product pointed by [WorkOrder].([ProductID]) (FK_WorkOrder_Product_ProductID)
        /// </summary>
        [ForeignKey("ProductID"), Required] public virtual Production_Product Production_Product { get; set; } // FK_WorkOrder_Product_ProductID

        /// <summary>
        /// Parent Production_ScrapReason pointed by [WorkOrder].([ScrapReasonID]) (FK_WorkOrder_ScrapReason_ScrapReasonID)
        /// </summary>
        [ForeignKey("ScrapReasonID")] public virtual Production_ScrapReason Production_ScrapReason { get; set; } // FK_WorkOrder_ScrapReason_ScrapReasonID

        public Production_WorkOrder()
        {
            ModifiedDate = System.DateTime.Now;
            Production_WorkOrderRoutings = new System.Collections.Generic.List<Production_WorkOrderRouting>();
        }
    }

    // WorkOrderRouting
    ///<summary>
    /// Work order details.
    ///</summary>
    [Table("WorkOrderRouting", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_WorkOrderRouting
    {

        ///<summary>
        /// Primary key. Foreign key to WorkOrder.WorkOrderID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"WorkOrderID", Order = 1, TypeName = "int")]
        [Index(@"PK_WorkOrderRouting_WorkOrderID_ProductID_OperationSequence", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Work order ID")]
        public int WorkOrderID { get; set; } // WorkOrderID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Product.ProductID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductID", Order = 2, TypeName = "int")]
        [Index(@"IX_WorkOrderRouting_ProductID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_WorkOrderRouting_WorkOrderID_ProductID_OperationSequence", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product ID")]
        public int ProductID { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Primary key. Indicates the manufacturing process sequence.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"OperationSequence", Order = 3, TypeName = "smallint")]
        [Index(@"PK_WorkOrderRouting_WorkOrderID_ProductID_OperationSequence", 3, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Operation sequence")]
        public short OperationSequence { get; set; } // OperationSequence (Primary key)

        ///<summary>
        /// Manufacturing location where the part is processed. Foreign key to Location.LocationID.
        ///</summary>
        [Column(@"LocationID", Order = 4, TypeName = "smallint")]
        [Required]
        [Display(Name = "Location ID")]
        public short LocationID { get; set; } // LocationID

        ///<summary>
        /// Planned manufacturing start date.
        ///</summary>
        [Column(@"ScheduledStartDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Scheduled start date")]
        public System.DateTime ScheduledStartDate { get; set; } // ScheduledStartDate

        ///<summary>
        /// Planned manufacturing end date.
        ///</summary>
        [Column(@"ScheduledEndDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Scheduled end date")]
        public System.DateTime ScheduledEndDate { get; set; } // ScheduledEndDate

        ///<summary>
        /// Actual start date.
        ///</summary>
        [Column(@"ActualStartDate", Order = 7, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Actual start date")]
        public System.DateTime? ActualStartDate { get; set; } // ActualStartDate

        ///<summary>
        /// Actual end date.
        ///</summary>
        [Column(@"ActualEndDate", Order = 8, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Actual end date")]
        public System.DateTime? ActualEndDate { get; set; } // ActualEndDate

        ///<summary>
        /// Number of manufacturing hours used.
        ///</summary>
        [Column(@"ActualResourceHrs", Order = 9, TypeName = "decimal")]
        [Display(Name = "Actual resource hrs")]
        public decimal? ActualResourceHrs { get; set; } // ActualResourceHrs

        ///<summary>
        /// Estimated manufacturing cost.
        ///</summary>
        [Column(@"PlannedCost", Order = 10, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Planned cost")]
        public decimal PlannedCost { get; set; } // PlannedCost

        ///<summary>
        /// Actual manufacturing cost.
        ///</summary>
        [Column(@"ActualCost", Order = 11, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "Actual cost")]
        public decimal? ActualCost { get; set; } // ActualCost

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 12, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Production_Location pointed by [WorkOrderRouting].([LocationID]) (FK_WorkOrderRouting_Location_LocationID)
        /// </summary>
        [ForeignKey("LocationID"), Required] public virtual Production_Location Production_Location { get; set; } // FK_WorkOrderRouting_Location_LocationID

        /// <summary>
        /// Parent Production_WorkOrder pointed by [WorkOrderRouting].([WorkOrderID]) (FK_WorkOrderRouting_WorkOrder_WorkOrderID)
        /// </summary>
        [ForeignKey("WorkOrderID"), Required] public virtual Production_WorkOrder Production_WorkOrder { get; set; } // FK_WorkOrderRouting_WorkOrder_WorkOrderID

        public Production_WorkOrderRouting()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductVendor
    ///<summary>
    /// Cross-reference table mapping vendors with the products they supply.
    ///</summary>
    [Table("ProductVendor", Schema = "Purchasing")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Purchasing_ProductVendor
    {

        ///<summary>
        /// Primary key. Foreign key to Product.ProductID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductID", Order = 1, TypeName = "int")]
        [Index(@"PK_ProductVendor_ProductID_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product ID")]
        public int ProductID { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Vendor.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 2, TypeName = "int")]
        [Index(@"IX_ProductVendor_BusinessEntityID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_ProductVendor_ProductID_BusinessEntityID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// The average span of time (in days) between placing an order with the vendor and receiving the purchased product.
        ///</summary>
        [Column(@"AverageLeadTime", Order = 3, TypeName = "int")]
        [Required]
        [Display(Name = "Average lead time")]
        public int AverageLeadTime { get; set; } // AverageLeadTime

        ///<summary>
        /// The vendor&apos;s usual selling price.
        ///</summary>
        [Column(@"StandardPrice", Order = 4, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Standard price")]
        public decimal StandardPrice { get; set; } // StandardPrice

        ///<summary>
        /// The selling price when last purchased.
        ///</summary>
        [Column(@"LastReceiptCost", Order = 5, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "Last receipt cost")]
        public decimal? LastReceiptCost { get; set; } // LastReceiptCost

        ///<summary>
        /// Date the product was last received by the vendor.
        ///</summary>
        [Column(@"LastReceiptDate", Order = 6, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Last receipt date")]
        public System.DateTime? LastReceiptDate { get; set; } // LastReceiptDate

        ///<summary>
        /// The maximum quantity that should be ordered.
        ///</summary>
        [Column(@"MinOrderQty", Order = 7, TypeName = "int")]
        [Required]
        [Display(Name = "Min order qty")]
        public int MinOrderQty { get; set; } // MinOrderQty

        ///<summary>
        /// The minimum quantity that should be ordered.
        ///</summary>
        [Column(@"MaxOrderQty", Order = 8, TypeName = "int")]
        [Required]
        [Display(Name = "Max order qty")]
        public int MaxOrderQty { get; set; } // MaxOrderQty

        ///<summary>
        /// The quantity currently on order.
        ///</summary>
        [Column(@"OnOrderQty", Order = 9, TypeName = "int")]
        [Display(Name = "On order qty")]
        public int? OnOrderQty { get; set; } // OnOrderQty

        ///<summary>
        /// The product&apos;s unit of measure.
        ///</summary>
        [Column(@"UnitMeasureCode", Order = 10, TypeName = "nchar")]
        [Index(@"IX_ProductVendor_UnitMeasureCode", 1, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "Unit measure code")]
        public string UnitMeasureCode { get; set; } // UnitMeasureCode (length: 3)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 11, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Purchasing_Vendor pointed by [ProductVendor].([BusinessEntityID]) (FK_ProductVendor_Vendor_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID"), Required] public virtual Purchasing_Vendor Purchasing_Vendor { get; set; } // FK_ProductVendor_Vendor_BusinessEntityID

        /// <summary>
        /// Parent Production_Product pointed by [ProductVendor].([ProductID]) (FK_ProductVendor_Product_ProductID)
        /// </summary>
        [ForeignKey("ProductID"), Required] public virtual Production_Product Production_Product { get; set; } // FK_ProductVendor_Product_ProductID

        /// <summary>
        /// Parent Production_UnitMeasure pointed by [ProductVendor].([UnitMeasureCode]) (FK_ProductVendor_UnitMeasure_UnitMeasureCode)
        /// </summary>
        [ForeignKey("UnitMeasureCode"), Required] public virtual Production_UnitMeasure Production_UnitMeasure { get; set; } // FK_ProductVendor_UnitMeasure_UnitMeasureCode

        public Purchasing_ProductVendor()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // PurchaseOrderDetail
    ///<summary>
    /// Individual products associated with a specific purchase order. See PurchaseOrderHeader.
    ///</summary>
    [Table("PurchaseOrderDetail", Schema = "Purchasing")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Purchasing_PurchaseOrderDetail
    {

        ///<summary>
        /// Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PurchaseOrderID", Order = 1, TypeName = "int")]
        [Index(@"PK_PurchaseOrderDetail_PurchaseOrderID_PurchaseOrderDetailID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Purchase order ID")]
        public int PurchaseOrderID { get; set; } // PurchaseOrderID (Primary key)

        ///<summary>
        /// Primary key. One line number per purchased product.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"PurchaseOrderDetailID", Order = 2, TypeName = "int")]
        [Index(@"PK_PurchaseOrderDetail_PurchaseOrderID_PurchaseOrderDetailID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Purchase order detail ID")]
        public int PurchaseOrderDetailID { get; set; } // PurchaseOrderDetailID (Primary key)

        ///<summary>
        /// Date the product is expected to be received.
        ///</summary>
        [Column(@"DueDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Due date")]
        public System.DateTime DueDate { get; set; } // DueDate

        ///<summary>
        /// Quantity ordered.
        ///</summary>
        [Column(@"OrderQty", Order = 4, TypeName = "smallint")]
        [Required]
        [Display(Name = "Order qty")]
        public short OrderQty { get; set; } // OrderQty

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        [Column(@"ProductID", Order = 5, TypeName = "int")]
        [Index(@"IX_PurchaseOrderDetail_ProductID", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Product ID")]
        public int ProductID { get; set; } // ProductID

        ///<summary>
        /// Vendor&apos;s selling price of a single product.
        ///</summary>
        [Column(@"UnitPrice", Order = 6, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Unit price")]
        public decimal UnitPrice { get; set; } // UnitPrice

        ///<summary>
        /// Per product subtotal. Computed as OrderQty * UnitPrice.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"LineTotal", Order = 7, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "Line total")]
        public decimal LineTotal { get; private set; } // LineTotal

        ///<summary>
        /// Quantity actually received from the vendor.
        ///</summary>
        [Column(@"ReceivedQty", Order = 8, TypeName = "decimal")]
        [Required]
        [Display(Name = "Received qty")]
        public decimal ReceivedQty { get; set; } // ReceivedQty

        ///<summary>
        /// Quantity rejected during inspection.
        ///</summary>
        [Column(@"RejectedQty", Order = 9, TypeName = "decimal")]
        [Required]
        [Display(Name = "Rejected qty")]
        public decimal RejectedQty { get; set; } // RejectedQty

        ///<summary>
        /// Quantity accepted into inventory. Computed as ReceivedQty - RejectedQty.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"StockedQty", Order = 10, TypeName = "decimal")]
        [Display(Name = "Stocked qty")]
        public decimal StockedQty { get; private set; } // StockedQty

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 11, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Production_Product pointed by [PurchaseOrderDetail].([ProductID]) (FK_PurchaseOrderDetail_Product_ProductID)
        /// </summary>
        [ForeignKey("ProductID"), Required] public virtual Production_Product Production_Product { get; set; } // FK_PurchaseOrderDetail_Product_ProductID

        /// <summary>
        /// Parent Purchasing_PurchaseOrderHeader pointed by [PurchaseOrderDetail].([PurchaseOrderID]) (FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID)
        /// </summary>
        [ForeignKey("PurchaseOrderID"), Required] public virtual Purchasing_PurchaseOrderHeader Purchasing_PurchaseOrderHeader { get; set; } // FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID

        public Purchasing_PurchaseOrderDetail()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // PurchaseOrderHeader
    ///<summary>
    /// General purchase order information. See PurchaseOrderDetail.
    ///</summary>
    [Table("PurchaseOrderHeader", Schema = "Purchasing")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Purchasing_PurchaseOrderHeader
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"PurchaseOrderID", Order = 1, TypeName = "int")]
        [Index(@"PK_PurchaseOrderHeader_PurchaseOrderID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Purchase order ID")]
        public int PurchaseOrderID { get; set; } // PurchaseOrderID (Primary key)

        ///<summary>
        /// Incremental number to track changes to the purchase order over time.
        ///</summary>
        [Column(@"RevisionNumber", Order = 2, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Revision number")]
        public byte RevisionNumber { get; set; } // RevisionNumber

        ///<summary>
        /// Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete
        ///</summary>
        [Column(@"Status", Order = 3, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Status")]
        public byte Status { get; set; } // Status

        ///<summary>
        /// Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.
        ///</summary>
        [Column(@"EmployeeID", Order = 4, TypeName = "int")]
        [Index(@"IX_PurchaseOrderHeader_EmployeeID", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Employee ID")]
        public int EmployeeID { get; set; } // EmployeeID

        ///<summary>
        /// Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.
        ///</summary>
        [Column(@"VendorID", Order = 5, TypeName = "int")]
        [Index(@"IX_PurchaseOrderHeader_VendorID", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Vendor ID")]
        public int VendorID { get; set; } // VendorID

        ///<summary>
        /// Shipping method. Foreign key to ShipMethod.ShipMethodID.
        ///</summary>
        [Column(@"ShipMethodID", Order = 6, TypeName = "int")]
        [Required]
        [Display(Name = "Ship method ID")]
        public int ShipMethodID { get; set; } // ShipMethodID

        ///<summary>
        /// Purchase order creation date.
        ///</summary>
        [Column(@"OrderDate", Order = 7, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Order date")]
        public System.DateTime OrderDate { get; set; } // OrderDate

        ///<summary>
        /// Estimated shipment date from the vendor.
        ///</summary>
        [Column(@"ShipDate", Order = 8, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Ship date")]
        public System.DateTime? ShipDate { get; set; } // ShipDate

        ///<summary>
        /// Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.
        ///</summary>
        [Column(@"SubTotal", Order = 9, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Sub total")]
        public decimal SubTotal { get; set; } // SubTotal

        ///<summary>
        /// Tax amount.
        ///</summary>
        [Column(@"TaxAmt", Order = 10, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Tax amt")]
        public decimal TaxAmt { get; set; } // TaxAmt

        ///<summary>
        /// Shipping cost.
        ///</summary>
        [Column(@"Freight", Order = 11, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Freight")]
        public decimal Freight { get; set; } // Freight

        ///<summary>
        /// Total due to vendor. Computed as Subtotal + TaxAmt + Freight.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"TotalDue", Order = 12, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "Total due")]
        public decimal TotalDue { get; private set; } // TotalDue

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 13, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Purchasing_PurchaseOrderDetails where [PurchaseOrderDetail].[PurchaseOrderID] point to this entity (FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Purchasing_PurchaseOrderDetail> Purchasing_PurchaseOrderDetails { get; set; } // PurchaseOrderDetail.FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID

        // Foreign keys

        /// <summary>
        /// Parent HumanResources_Employee pointed by [PurchaseOrderHeader].([EmployeeID]) (FK_PurchaseOrderHeader_Employee_EmployeeID)
        /// </summary>
        [ForeignKey("EmployeeID"), Required] public virtual HumanResources_Employee HumanResources_Employee { get; set; } // FK_PurchaseOrderHeader_Employee_EmployeeID

        /// <summary>
        /// Parent Purchasing_ShipMethod pointed by [PurchaseOrderHeader].([ShipMethodID]) (FK_PurchaseOrderHeader_ShipMethod_ShipMethodID)
        /// </summary>
        [ForeignKey("ShipMethodID"), Required] public virtual Purchasing_ShipMethod Purchasing_ShipMethod { get; set; } // FK_PurchaseOrderHeader_ShipMethod_ShipMethodID

        /// <summary>
        /// Parent Purchasing_Vendor pointed by [PurchaseOrderHeader].([VendorID]) (FK_PurchaseOrderHeader_Vendor_VendorID)
        /// </summary>
        [ForeignKey("VendorID"), Required] public virtual Purchasing_Vendor Purchasing_Vendor { get; set; } // FK_PurchaseOrderHeader_Vendor_VendorID

        public Purchasing_PurchaseOrderHeader()
        {
            RevisionNumber = 0;
            Status = 1;
            OrderDate = System.DateTime.Now;
            SubTotal = 0.00m;
            TaxAmt = 0.00m;
            Freight = 0.00m;
            ModifiedDate = System.DateTime.Now;
            Purchasing_PurchaseOrderDetails = new System.Collections.Generic.List<Purchasing_PurchaseOrderDetail>();
        }
    }

    // ShipMethod
    ///<summary>
    /// Shipping company lookup table.
    ///</summary>
    [Table("ShipMethod", Schema = "Purchasing")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Purchasing_ShipMethod
    {

        ///<summary>
        /// Primary key for ShipMethod records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ShipMethodID", Order = 1, TypeName = "int")]
        [Index(@"PK_ShipMethod_ShipMethodID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Ship method ID")]
        public int ShipMethodID { get; set; } // ShipMethodID (Primary key)

        ///<summary>
        /// Shipping company name.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_ShipMethod_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Minimum shipping charge.
        ///</summary>
        [Column(@"ShipBase", Order = 3, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Ship base")]
        public decimal ShipBase { get; set; } // ShipBase

        ///<summary>
        /// Shipping charge per pound.
        ///</summary>
        [Column(@"ShipRate", Order = 4, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Ship rate")]
        public decimal ShipRate { get; set; } // ShipRate

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 5, TypeName = "uniqueidentifier")]
        [Index(@"AK_ShipMethod_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Purchasing_PurchaseOrderHeaders where [PurchaseOrderHeader].[ShipMethodID] point to this entity (FK_PurchaseOrderHeader_ShipMethod_ShipMethodID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Purchasing_PurchaseOrderHeader> Purchasing_PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader.FK_PurchaseOrderHeader_ShipMethod_ShipMethodID
        /// <summary>
        /// Child Sales_SalesOrderHeaders where [SalesOrderHeader].[ShipMethodID] point to this entity (FK_SalesOrderHeader_ShipMethod_ShipMethodID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_ShipMethod_ShipMethodID

        public Purchasing_ShipMethod()
        {
            ShipBase = 0.00m;
            ShipRate = 0.00m;
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Purchasing_PurchaseOrderHeaders = new System.Collections.Generic.List<Purchasing_PurchaseOrderHeader>();
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
        }
    }

    // Vendor
    ///<summary>
    /// Companies from whom Adventure Works Cycles purchases parts or other goods.
    ///</summary>
    [Table("Vendor", Schema = "Purchasing")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Purchasing_Vendor
    {

        ///<summary>
        /// Primary key for Vendor records.  Foreign key to BusinessEntity.BusinessEntityID
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_Vendor_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        [ForeignKey("Person_BusinessEntity")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Vendor account (identification) number.
        ///</summary>
        [Column(@"AccountNumber", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_Vendor_AccountNumber", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(15)]
        [StringLength(15)]
        [Display(Name = "Account number")]
        public string AccountNumber { get; set; } // AccountNumber (length: 15)

        ///<summary>
        /// Company name.
        ///</summary>
        [Column(@"Name", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// 1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average
        ///</summary>
        [Column(@"CreditRating", Order = 4, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Credit rating")]
        public byte CreditRating { get; set; } // CreditRating

        ///<summary>
        /// 0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.
        ///</summary>
        [Column(@"PreferredVendorStatus", Order = 5, TypeName = "bit")]
        [Required]
        [Display(Name = "Preferred vendor status")]
        public bool PreferredVendorStatus { get; set; } // PreferredVendorStatus

        ///<summary>
        /// 0 = Vendor no longer used. 1 = Vendor is actively used.
        ///</summary>
        [Column(@"ActiveFlag", Order = 6, TypeName = "bit")]
        [Required]
        [Display(Name = "Active flag")]
        public bool ActiveFlag { get; set; } // ActiveFlag

        ///<summary>
        /// Vendor URL.
        ///</summary>
        [Column(@"PurchasingWebServiceURL", Order = 7, TypeName = "nvarchar")]
        [MaxLength(1024)]
        [StringLength(1024)]
        [Display(Name = "Purchasing web service url")]
        public string PurchasingWebServiceURL { get; set; } // PurchasingWebServiceURL (length: 1024)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 8, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Purchasing_ProductVendors where [ProductVendor].[BusinessEntityID] point to this entity (FK_ProductVendor_Vendor_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Purchasing_ProductVendor> Purchasing_ProductVendors { get; set; } // ProductVendor.FK_ProductVendor_Vendor_BusinessEntityID
        /// <summary>
        /// Child Purchasing_PurchaseOrderHeaders where [PurchaseOrderHeader].[VendorID] point to this entity (FK_PurchaseOrderHeader_Vendor_VendorID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Purchasing_PurchaseOrderHeader> Purchasing_PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader.FK_PurchaseOrderHeader_Vendor_VendorID

        // Foreign keys

        /// <summary>
        /// Parent Person_BusinessEntity pointed by [Vendor].([BusinessEntityID]) (FK_Vendor_BusinessEntity_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID"), Required] public virtual Person_BusinessEntity Person_BusinessEntity { get; set; } // FK_Vendor_BusinessEntity_BusinessEntityID

        public Purchasing_Vendor()
        {
            PreferredVendorStatus = true;
            ActiveFlag = true;
            ModifiedDate = System.DateTime.Now;
            Purchasing_ProductVendors = new System.Collections.Generic.List<Purchasing_ProductVendor>();
            Purchasing_PurchaseOrderHeaders = new System.Collections.Generic.List<Purchasing_PurchaseOrderHeader>();
        }
    }

    // CountryRegionCurrency
    ///<summary>
    /// Cross-reference table mapping ISO currency codes to a country or region.
    ///</summary>
    [Table("CountryRegionCurrency", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_CountryRegionCurrency
    {

        ///<summary>
        /// ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CountryRegionCode", Order = 1, TypeName = "nvarchar")]
        [Index(@"PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Key]
        [Display(Name = "Country region code")]
        public string CountryRegionCode { get; set; } // CountryRegionCode (Primary key) (length: 3)

        ///<summary>
        /// ISO standard currency code. Foreign key to Currency.CurrencyCode.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CurrencyCode", Order = 2, TypeName = "nchar")]
        [Index(@"IX_CountryRegionCurrency_CurrencyCode", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode", 2, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Key]
        [Display(Name = "Currency code")]
        public string CurrencyCode { get; set; } // CurrencyCode (Primary key) (length: 3)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Person_CountryRegion pointed by [CountryRegionCurrency].([CountryRegionCode]) (FK_CountryRegionCurrency_CountryRegion_CountryRegionCode)
        /// </summary>
        [ForeignKey("CountryRegionCode"), Required] public virtual Person_CountryRegion Person_CountryRegion { get; set; } // FK_CountryRegionCurrency_CountryRegion_CountryRegionCode

        /// <summary>
        /// Parent Sales_Currency pointed by [CountryRegionCurrency].([CurrencyCode]) (FK_CountryRegionCurrency_Currency_CurrencyCode)
        /// </summary>
        [ForeignKey("CurrencyCode"), Required] public virtual Sales_Currency Sales_Currency { get; set; } // FK_CountryRegionCurrency_Currency_CurrencyCode

        public Sales_CountryRegionCurrency()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // CreditCard
    ///<summary>
    /// Customer credit card information.
    ///</summary>
    [Table("CreditCard", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_CreditCard
    {

        ///<summary>
        /// Primary key for CreditCard records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"CreditCardID", Order = 1, TypeName = "int")]
        [Index(@"PK_CreditCard_CreditCardID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Credit card ID")]
        public int CreditCardID { get; set; } // CreditCardID (Primary key)

        ///<summary>
        /// Credit card name.
        ///</summary>
        [Column(@"CardType", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Card type")]
        public string CardType { get; set; } // CardType (length: 50)

        ///<summary>
        /// Credit card number.
        ///</summary>
        [Column(@"CardNumber", Order = 3, TypeName = "nvarchar")]
        [Index(@"AK_CreditCard_CardNumber", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "Card number")]
        public string CardNumber { get; set; } // CardNumber (length: 25)

        ///<summary>
        /// Credit card expiration month.
        ///</summary>
        [Column(@"ExpMonth", Order = 4, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Exp month")]
        public byte ExpMonth { get; set; } // ExpMonth

        ///<summary>
        /// Credit card expiration year.
        ///</summary>
        [Column(@"ExpYear", Order = 5, TypeName = "smallint")]
        [Required]
        [Display(Name = "Exp year")]
        public short ExpYear { get; set; } // ExpYear

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_PersonCreditCards where [PersonCreditCard].[CreditCardID] point to this entity (FK_PersonCreditCard_CreditCard_CreditCardID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_PersonCreditCard> Sales_PersonCreditCards { get; set; } // PersonCreditCard.FK_PersonCreditCard_CreditCard_CreditCardID
        /// <summary>
        /// Child Sales_SalesOrderHeaders where [SalesOrderHeader].[CreditCardID] point to this entity (FK_SalesOrderHeader_CreditCard_CreditCardID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_CreditCard_CreditCardID

        public Sales_CreditCard()
        {
            ModifiedDate = System.DateTime.Now;
            Sales_PersonCreditCards = new System.Collections.Generic.List<Sales_PersonCreditCard>();
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
        }
    }

    // Currency
    ///<summary>
    /// Lookup table containing standard ISO currencies.
    ///</summary>
    [Table("Currency", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_Currency
    {

        ///<summary>
        /// The ISO code for the Currency.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CurrencyCode", Order = 1, TypeName = "nchar")]
        [Index(@"PK_Currency_CurrencyCode", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Key]
        [Display(Name = "Currency code")]
        public string CurrencyCode { get; set; } // CurrencyCode (Primary key) (length: 3)

        ///<summary>
        /// Currency name.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_Currency_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_CountryRegionCurrencies where [CountryRegionCurrency].[CurrencyCode] point to this entity (FK_CountryRegionCurrency_Currency_CurrencyCode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_CountryRegionCurrency> Sales_CountryRegionCurrencies { get; set; } // CountryRegionCurrency.FK_CountryRegionCurrency_Currency_CurrencyCode
        /// <summary>
        /// Child Sales_CurrencyRates where [CurrencyRate].[FromCurrencyCode] point to this entity (FK_CurrencyRate_Currency_FromCurrencyCode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_CurrencyRate> Sales_CurrencyRates_FromCurrencyCode { get; set; } // CurrencyRate.FK_CurrencyRate_Currency_FromCurrencyCode
        /// <summary>
        /// Child Sales_CurrencyRates where [CurrencyRate].[ToCurrencyCode] point to this entity (FK_CurrencyRate_Currency_ToCurrencyCode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_CurrencyRate> Sales_CurrencyRates_ToCurrencyCode { get; set; } // CurrencyRate.FK_CurrencyRate_Currency_ToCurrencyCode

        public Sales_Currency()
        {
            ModifiedDate = System.DateTime.Now;
            Sales_CountryRegionCurrencies = new System.Collections.Generic.List<Sales_CountryRegionCurrency>();
            Sales_CurrencyRates_FromCurrencyCode = new System.Collections.Generic.List<Sales_CurrencyRate>();
            Sales_CurrencyRates_ToCurrencyCode = new System.Collections.Generic.List<Sales_CurrencyRate>();
        }
    }

    // CurrencyRate
    ///<summary>
    /// Currency exchange rates.
    ///</summary>
    [Table("CurrencyRate", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_CurrencyRate
    {

        ///<summary>
        /// Primary key for CurrencyRate records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"CurrencyRateID", Order = 1, TypeName = "int")]
        [Index(@"PK_CurrencyRate_CurrencyRateID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Currency rate ID")]
        public int CurrencyRateID { get; set; } // CurrencyRateID (Primary key)

        ///<summary>
        /// Date and time the exchange rate was obtained.
        ///</summary>
        [Column(@"CurrencyRateDate", Order = 2, TypeName = "datetime")]
        [Index(@"AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Currency rate date")]
        public System.DateTime CurrencyRateDate { get; set; } // CurrencyRateDate

        ///<summary>
        /// Exchange rate was converted from this currency code.
        ///</summary>
        [Column(@"FromCurrencyCode", Order = 3, TypeName = "nchar")]
        [Index(@"AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode", 2, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "From currency code")]
        public string FromCurrencyCode { get; set; } // FromCurrencyCode (length: 3)

        ///<summary>
        /// Exchange rate was converted to this currency code.
        ///</summary>
        [Column(@"ToCurrencyCode", Order = 4, TypeName = "nchar")]
        [Index(@"AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode", 3, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "To currency code")]
        public string ToCurrencyCode { get; set; } // ToCurrencyCode (length: 3)

        ///<summary>
        /// Average exchange rate for the day.
        ///</summary>
        [Column(@"AverageRate", Order = 5, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Average rate")]
        public decimal AverageRate { get; set; } // AverageRate

        ///<summary>
        /// Final exchange rate for the day.
        ///</summary>
        [Column(@"EndOfDayRate", Order = 6, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "End of day rate")]
        public decimal EndOfDayRate { get; set; } // EndOfDayRate

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 7, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SalesOrderHeaders where [SalesOrderHeader].[CurrencyRateID] point to this entity (FK_SalesOrderHeader_CurrencyRate_CurrencyRateID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_CurrencyRate_CurrencyRateID

        // Foreign keys

        /// <summary>
        /// Parent Sales_Currency pointed by [CurrencyRate].([FromCurrencyCode]) (FK_CurrencyRate_Currency_FromCurrencyCode)
        /// </summary>
        [ForeignKey("FromCurrencyCode"), Required] public virtual Sales_Currency Sales_Currency_FromCurrencyCode { get; set; } // FK_CurrencyRate_Currency_FromCurrencyCode

        /// <summary>
        /// Parent Sales_Currency pointed by [CurrencyRate].([ToCurrencyCode]) (FK_CurrencyRate_Currency_ToCurrencyCode)
        /// </summary>
        [ForeignKey("ToCurrencyCode"), Required] public virtual Sales_Currency Sales_Currency_ToCurrencyCode { get; set; } // FK_CurrencyRate_Currency_ToCurrencyCode

        public Sales_CurrencyRate()
        {
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
        }
    }

    // Customer
    ///<summary>
    /// Current customer information. Also see the Person and Store tables.
    ///</summary>
    [Table("Customer", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_Customer
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"CustomerID", Order = 1, TypeName = "int")]
        [Index(@"PK_Customer_CustomerID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Customer ID")]
        public int CustomerID { get; set; } // CustomerID (Primary key)

        ///<summary>
        /// Foreign key to Person.BusinessEntityID
        ///</summary>
        [Column(@"PersonID", Order = 2, TypeName = "int")]
        [Display(Name = "Person ID")]
        public int? PersonID { get; set; } // PersonID

        ///<summary>
        /// Foreign key to Store.BusinessEntityID
        ///</summary>
        [Column(@"StoreID", Order = 3, TypeName = "int")]
        [Display(Name = "Store ID")]
        public int? StoreID { get; set; } // StoreID

        ///<summary>
        /// ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        [Column(@"TerritoryID", Order = 4, TypeName = "int")]
        [Index(@"IX_Customer_TerritoryID", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Territory ID")]
        public int? TerritoryID { get; set; } // TerritoryID

        ///<summary>
        /// Unique number identifying the customer assigned by the accounting system.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"AccountNumber", Order = 5, TypeName = "varchar")]
        [Index(@"AK_Customer_AccountNumber", 1, IsUnique = true, IsClustered = false)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Account number")]
        public string AccountNumber { get; private set; } // AccountNumber (length: 10)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 6, TypeName = "uniqueidentifier")]
        [Index(@"AK_Customer_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 7, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SalesOrderHeaders where [SalesOrderHeader].[CustomerID] point to this entity (FK_SalesOrderHeader_Customer_CustomerID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Customer_CustomerID

        // Foreign keys

        /// <summary>
        /// Parent Person_Person pointed by [Customer].([PersonID]) (FK_Customer_Person_PersonID)
        /// </summary>
        [ForeignKey("PersonID")] public virtual Person_Person Person_Person { get; set; } // FK_Customer_Person_PersonID

        /// <summary>
        /// Parent Sales_Store pointed by [Customer].([StoreID]) (FK_Customer_Store_StoreID)
        /// </summary>
        [ForeignKey("StoreID")] public virtual Sales_Store Sales_Store { get; set; } // FK_Customer_Store_StoreID

        /// <summary>
        /// Parent Sales_SalesTerritory pointed by [Customer].([TerritoryID]) (FK_Customer_SalesTerritory_TerritoryID)
        /// </summary>
        [ForeignKey("TerritoryID")] public virtual Sales_SalesTerritory Sales_SalesTerritory { get; set; } // FK_Customer_SalesTerritory_TerritoryID

        public Sales_Customer()
        {
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
        }
    }

    // PersonCreditCard
    ///<summary>
    /// Cross-reference table mapping people to their credit card information in the CreditCard table.
    ///</summary>
    [Table("PersonCreditCard", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_PersonCreditCard
    {

        ///<summary>
        /// Business entity identification number. Foreign key to Person.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_PersonCreditCard_BusinessEntityID_CreditCardID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Credit card identification number. Foreign key to CreditCard.CreditCardID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CreditCardID", Order = 2, TypeName = "int")]
        [Index(@"PK_PersonCreditCard_BusinessEntityID_CreditCardID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Credit card ID")]
        public int CreditCardID { get; set; } // CreditCardID (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Person_Person pointed by [PersonCreditCard].([BusinessEntityID]) (FK_PersonCreditCard_Person_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID"), Required] public virtual Person_Person Person_Person { get; set; } // FK_PersonCreditCard_Person_BusinessEntityID

        /// <summary>
        /// Parent Sales_CreditCard pointed by [PersonCreditCard].([CreditCardID]) (FK_PersonCreditCard_CreditCard_CreditCardID)
        /// </summary>
        [ForeignKey("CreditCardID"), Required] public virtual Sales_CreditCard Sales_CreditCard { get; set; } // FK_PersonCreditCard_CreditCard_CreditCardID

        public Sales_PersonCreditCard()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesOrderDetail
    ///<summary>
    /// Individual products associated with a specific sales order. See SalesOrderHeader.
    ///</summary>
    [Table("SalesOrderDetail", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesOrderDetail
    {

        ///<summary>
        /// Primary key. Foreign key to SalesOrderHeader.SalesOrderID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"SalesOrderID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Sales order ID")]
        public int SalesOrderID { get; set; } // SalesOrderID (Primary key)

        ///<summary>
        /// Primary key. One incremental unique number per product sold.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"SalesOrderDetailID", Order = 2, TypeName = "int")]
        [Index(@"PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Sales order detail ID")]
        public int SalesOrderDetailID { get; set; } // SalesOrderDetailID (Primary key)

        ///<summary>
        /// Shipment tracking number supplied by the shipper.
        ///</summary>
        [Column(@"CarrierTrackingNumber", Order = 3, TypeName = "nvarchar")]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "Carrier tracking number")]
        public string CarrierTrackingNumber { get; set; } // CarrierTrackingNumber (length: 25)

        ///<summary>
        /// Quantity ordered per product.
        ///</summary>
        [Column(@"OrderQty", Order = 4, TypeName = "smallint")]
        [Required]
        [Display(Name = "Order qty")]
        public short OrderQty { get; set; } // OrderQty

        ///<summary>
        /// Product sold to customer. Foreign key to Product.ProductID.
        ///</summary>
        [Column(@"ProductID", Order = 5, TypeName = "int")]
        [Index(@"IX_SalesOrderDetail_ProductID", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Product ID")]
        public int ProductID { get; set; } // ProductID

        ///<summary>
        /// Promotional code. Foreign key to SpecialOffer.SpecialOfferID.
        ///</summary>
        [Column(@"SpecialOfferID", Order = 6, TypeName = "int")]
        [Required]
        [Display(Name = "Special offer ID")]
        public int SpecialOfferID { get; set; } // SpecialOfferID

        ///<summary>
        /// Selling price of a single product.
        ///</summary>
        [Column(@"UnitPrice", Order = 7, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Unit price")]
        public decimal UnitPrice { get; set; } // UnitPrice

        ///<summary>
        /// Discount amount.
        ///</summary>
        [Column(@"UnitPriceDiscount", Order = 8, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Unit price discount")]
        public decimal UnitPriceDiscount { get; set; } // UnitPriceDiscount

        ///<summary>
        /// Per product subtotal. Computed as UnitPrice * (1 - UnitPriceDiscount) * OrderQty.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"LineTotal", Order = 9, TypeName = "numeric")]
        [Display(Name = "Line total")]
        public decimal LineTotal { get; private set; } // LineTotal

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 10, TypeName = "uniqueidentifier")]
        [Index(@"AK_SalesOrderDetail_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 11, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Sales_SalesOrderHeader pointed by [SalesOrderDetail].([SalesOrderID]) (FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID)
        /// </summary>
        [ForeignKey("SalesOrderID"), Required] public virtual Sales_SalesOrderHeader Sales_SalesOrderHeader { get; set; } // FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID

        /// <summary>
        /// Parent Sales_SpecialOfferProduct pointed by [SalesOrderDetail].([SpecialOfferID], [ProductID]) (FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID)
        /// </summary>
        [ForeignKey("SpecialOfferID, ProductID"), Required] public virtual Sales_SpecialOfferProduct Sales_SpecialOfferProduct { get; set; } // FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID

        public Sales_SalesOrderDetail()
        {
            UnitPriceDiscount = 0.0m;
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesOrderHeader
    ///<summary>
    /// General sales order information.
    ///</summary>
    [Table("SalesOrderHeader", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesOrderHeader
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"SalesOrderID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesOrderHeader_SalesOrderID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Sales order ID")]
        public int SalesOrderID { get; set; } // SalesOrderID (Primary key)

        ///<summary>
        /// Incremental number to track changes to the sales order over time.
        ///</summary>
        [Column(@"RevisionNumber", Order = 2, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Revision number")]
        public byte RevisionNumber { get; set; } // RevisionNumber

        ///<summary>
        /// Dates the sales order was created.
        ///</summary>
        [Column(@"OrderDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Order date")]
        public System.DateTime OrderDate { get; set; } // OrderDate

        ///<summary>
        /// Date the order is due to the customer.
        ///</summary>
        [Column(@"DueDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Due date")]
        public System.DateTime DueDate { get; set; } // DueDate

        ///<summary>
        /// Date the order was shipped to the customer.
        ///</summary>
        [Column(@"ShipDate", Order = 5, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Ship date")]
        public System.DateTime? ShipDate { get; set; } // ShipDate

        ///<summary>
        /// Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled
        ///</summary>
        [Column(@"Status", Order = 6, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Status")]
        public byte Status { get; set; } // Status

        ///<summary>
        /// 0 = Order placed by sales person. 1 = Order placed online by customer.
        ///</summary>
        [Column(@"OnlineOrderFlag", Order = 7, TypeName = "bit")]
        [Required]
        [Display(Name = "Online order flag")]
        public bool OnlineOrderFlag { get; set; } // OnlineOrderFlag

        ///<summary>
        /// Unique sales order identification number.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"SalesOrderNumber", Order = 8, TypeName = "nvarchar")]
        [Index(@"AK_SalesOrderHeader_SalesOrderNumber", 1, IsUnique = true, IsClustered = false)]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "Sales order number")]
        public string SalesOrderNumber { get; private set; } // SalesOrderNumber (length: 25)

        ///<summary>
        /// Customer purchase order number reference.
        ///</summary>
        [Column(@"PurchaseOrderNumber", Order = 9, TypeName = "nvarchar")]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "Purchase order number")]
        public string PurchaseOrderNumber { get; set; } // PurchaseOrderNumber (length: 25)

        ///<summary>
        /// Financial accounting number reference.
        ///</summary>
        [Column(@"AccountNumber", Order = 10, TypeName = "nvarchar")]
        [MaxLength(15)]
        [StringLength(15)]
        [Display(Name = "Account number")]
        public string AccountNumber { get; set; } // AccountNumber (length: 15)

        ///<summary>
        /// Customer identification number. Foreign key to Customer.BusinessEntityID.
        ///</summary>
        [Column(@"CustomerID", Order = 11, TypeName = "int")]
        [Index(@"IX_SalesOrderHeader_CustomerID", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Customer ID")]
        public int CustomerID { get; set; } // CustomerID

        ///<summary>
        /// Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        [Column(@"SalesPersonID", Order = 12, TypeName = "int")]
        [Index(@"IX_SalesOrderHeader_SalesPersonID", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Sales person ID")]
        public int? SalesPersonID { get; set; } // SalesPersonID

        ///<summary>
        /// Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        [Column(@"TerritoryID", Order = 13, TypeName = "int")]
        [Display(Name = "Territory ID")]
        public int? TerritoryID { get; set; } // TerritoryID

        ///<summary>
        /// Customer billing address. Foreign key to Address.AddressID.
        ///</summary>
        [Column(@"BillToAddressID", Order = 14, TypeName = "int")]
        [Required]
        [Display(Name = "Bill to address ID")]
        public int BillToAddressID { get; set; } // BillToAddressID

        ///<summary>
        /// Customer shipping address. Foreign key to Address.AddressID.
        ///</summary>
        [Column(@"ShipToAddressID", Order = 15, TypeName = "int")]
        [Required]
        [Display(Name = "Ship to address ID")]
        public int ShipToAddressID { get; set; } // ShipToAddressID

        ///<summary>
        /// Shipping method. Foreign key to ShipMethod.ShipMethodID.
        ///</summary>
        [Column(@"ShipMethodID", Order = 16, TypeName = "int")]
        [Required]
        [Display(Name = "Ship method ID")]
        public int ShipMethodID { get; set; } // ShipMethodID

        ///<summary>
        /// Credit card identification number. Foreign key to CreditCard.CreditCardID.
        ///</summary>
        [Column(@"CreditCardID", Order = 17, TypeName = "int")]
        [Display(Name = "Credit card ID")]
        public int? CreditCardID { get; set; } // CreditCardID

        ///<summary>
        /// Approval code provided by the credit card company.
        ///</summary>
        [Column(@"CreditCardApprovalCode", Order = 18, TypeName = "varchar")]
        [MaxLength(15)]
        [StringLength(15)]
        [Display(Name = "Credit card approval code")]
        public string CreditCardApprovalCode { get; set; } // CreditCardApprovalCode (length: 15)

        ///<summary>
        /// Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
        ///</summary>
        [Column(@"CurrencyRateID", Order = 19, TypeName = "int")]
        [Display(Name = "Currency rate ID")]
        public int? CurrencyRateID { get; set; } // CurrencyRateID

        ///<summary>
        /// Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.
        ///</summary>
        [Column(@"SubTotal", Order = 20, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Sub total")]
        public decimal SubTotal { get; set; } // SubTotal

        ///<summary>
        /// Tax amount.
        ///</summary>
        [Column(@"TaxAmt", Order = 21, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Tax amt")]
        public decimal TaxAmt { get; set; } // TaxAmt

        ///<summary>
        /// Shipping cost.
        ///</summary>
        [Column(@"Freight", Order = 22, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Freight")]
        public decimal Freight { get; set; } // Freight

        ///<summary>
        /// Total due from customer. Computed as Subtotal + TaxAmt + Freight.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"TotalDue", Order = 23, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "Total due")]
        public decimal TotalDue { get; private set; } // TotalDue

        ///<summary>
        /// Sales representative comments.
        ///</summary>
        [Column(@"Comment", Order = 24, TypeName = "nvarchar")]
        [MaxLength(128)]
        [StringLength(128)]
        [Display(Name = "Comment")]
        public string Comment { get; set; } // Comment (length: 128)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 25, TypeName = "uniqueidentifier")]
        [Index(@"AK_SalesOrderHeader_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 26, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SalesOrderDetails where [SalesOrderDetail].[SalesOrderID] point to this entity (FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderDetail> Sales_SalesOrderDetails { get; set; } // SalesOrderDetail.FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID
        /// <summary>
        /// Child Sales_SalesOrderHeaderSalesReasons where [SalesOrderHeaderSalesReason].[SalesOrderID] point to this entity (FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeaderSalesReason> Sales_SalesOrderHeaderSalesReasons { get; set; } // SalesOrderHeaderSalesReason.FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID

        // Foreign keys

        /// <summary>
        /// Parent Person_Address pointed by [SalesOrderHeader].([BillToAddressID]) (FK_SalesOrderHeader_Address_BillToAddressID)
        /// </summary>
        [ForeignKey("BillToAddressID"), Required] public virtual Person_Address BillToAddress { get; set; } // FK_SalesOrderHeader_Address_BillToAddressID

        /// <summary>
        /// Parent Sales_CreditCard pointed by [SalesOrderHeader].([CreditCardID]) (FK_SalesOrderHeader_CreditCard_CreditCardID)
        /// </summary>
        [ForeignKey("CreditCardID")] public virtual Sales_CreditCard Sales_CreditCard { get; set; } // FK_SalesOrderHeader_CreditCard_CreditCardID

        /// <summary>
        /// Parent Sales_CurrencyRate pointed by [SalesOrderHeader].([CurrencyRateID]) (FK_SalesOrderHeader_CurrencyRate_CurrencyRateID)
        /// </summary>
        [ForeignKey("CurrencyRateID")] public virtual Sales_CurrencyRate Sales_CurrencyRate { get; set; } // FK_SalesOrderHeader_CurrencyRate_CurrencyRateID

        /// <summary>
        /// Parent Sales_Customer pointed by [SalesOrderHeader].([CustomerID]) (FK_SalesOrderHeader_Customer_CustomerID)
        /// </summary>
        [ForeignKey("CustomerID"), Required] public virtual Sales_Customer Sales_Customer { get; set; } // FK_SalesOrderHeader_Customer_CustomerID

        /// <summary>
        /// Parent Sales_SalesPerson pointed by [SalesOrderHeader].([SalesPersonID]) (FK_SalesOrderHeader_SalesPerson_SalesPersonID)
        /// </summary>
        [ForeignKey("SalesPersonID")] public virtual Sales_SalesPerson Sales_SalesPerson { get; set; } // FK_SalesOrderHeader_SalesPerson_SalesPersonID

        /// <summary>
        /// Parent Purchasing_ShipMethod pointed by [SalesOrderHeader].([ShipMethodID]) (FK_SalesOrderHeader_ShipMethod_ShipMethodID)
        /// </summary>
        [ForeignKey("ShipMethodID"), Required] public virtual Purchasing_ShipMethod Purchasing_ShipMethod { get; set; } // FK_SalesOrderHeader_ShipMethod_ShipMethodID

        /// <summary>
        /// Parent Person_Address pointed by [SalesOrderHeader].([ShipToAddressID]) (FK_SalesOrderHeader_Address_ShipToAddressID)
        /// </summary>
        [ForeignKey("ShipToAddressID"), Required] public virtual Person_Address ShipToAddress { get; set; } // FK_SalesOrderHeader_Address_ShipToAddressID

        /// <summary>
        /// Parent Sales_SalesTerritory pointed by [SalesOrderHeader].([TerritoryID]) (FK_SalesOrderHeader_SalesTerritory_TerritoryID)
        /// </summary>
        [ForeignKey("TerritoryID")] public virtual Sales_SalesTerritory Sales_SalesTerritory { get; set; } // FK_SalesOrderHeader_SalesTerritory_TerritoryID

        public Sales_SalesOrderHeader()
        {
            RevisionNumber = 0;
            OrderDate = System.DateTime.Now;
            Status = 1;
            OnlineOrderFlag = true;
            SubTotal = 0.00m;
            TaxAmt = 0.00m;
            Freight = 0.00m;
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderDetails = new System.Collections.Generic.List<Sales_SalesOrderDetail>();
            Sales_SalesOrderHeaderSalesReasons = new System.Collections.Generic.List<Sales_SalesOrderHeaderSalesReason>();
        }
    }

    // SalesOrderHeaderSalesReason
    ///<summary>
    /// Cross-reference table mapping sales orders to sales reason codes.
    ///</summary>
    [Table("SalesOrderHeaderSalesReason", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesOrderHeaderSalesReason
    {

        ///<summary>
        /// Primary key. Foreign key to SalesOrderHeader.SalesOrderID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"SalesOrderID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesOrderHeaderSalesReason_SalesOrderID_SalesReasonID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Sales order ID")]
        public int SalesOrderID { get; set; } // SalesOrderID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to SalesReason.SalesReasonID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"SalesReasonID", Order = 2, TypeName = "int")]
        [Index(@"PK_SalesOrderHeaderSalesReason_SalesOrderID_SalesReasonID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Sales reason ID")]
        public int SalesReasonID { get; set; } // SalesReasonID (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Sales_SalesOrderHeader pointed by [SalesOrderHeaderSalesReason].([SalesOrderID]) (FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID)
        /// </summary>
        [ForeignKey("SalesOrderID"), Required] public virtual Sales_SalesOrderHeader Sales_SalesOrderHeader { get; set; } // FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID

        /// <summary>
        /// Parent Sales_SalesReason pointed by [SalesOrderHeaderSalesReason].([SalesReasonID]) (FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID)
        /// </summary>
        [ForeignKey("SalesReasonID"), Required] public virtual Sales_SalesReason Sales_SalesReason { get; set; } // FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID

        public Sales_SalesOrderHeaderSalesReason()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesPerson
    ///<summary>
    /// Sales representative current information.
    ///</summary>
    [Table("SalesPerson", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesPerson
    {

        ///<summary>
        /// Primary key for SalesPerson records. Foreign key to Employee.BusinessEntityID
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesPerson_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        [ForeignKey("HumanResources_Employee")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        [Column(@"TerritoryID", Order = 2, TypeName = "int")]
        [Display(Name = "Territory ID")]
        public int? TerritoryID { get; set; } // TerritoryID

        ///<summary>
        /// Projected yearly sales.
        ///</summary>
        [Column(@"SalesQuota", Order = 3, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "Sales quota")]
        public decimal? SalesQuota { get; set; } // SalesQuota

        ///<summary>
        /// Bonus due if quota is met.
        ///</summary>
        [Column(@"Bonus", Order = 4, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Bonus")]
        public decimal Bonus { get; set; } // Bonus

        ///<summary>
        /// Commision percent received per sale.
        ///</summary>
        [Column(@"CommissionPct", Order = 5, TypeName = "smallmoney")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Commission pct")]
        public decimal CommissionPct { get; set; } // CommissionPct

        ///<summary>
        /// Sales total year to date.
        ///</summary>
        [Column(@"SalesYTD", Order = 6, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Sales ytd")]
        public decimal SalesYTD { get; set; } // SalesYTD

        ///<summary>
        /// Sales total of previous year.
        ///</summary>
        [Column(@"SalesLastYear", Order = 7, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Sales last year")]
        public decimal SalesLastYear { get; set; } // SalesLastYear

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 8, TypeName = "uniqueidentifier")]
        [Index(@"AK_SalesPerson_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 9, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SalesOrderHeaders where [SalesOrderHeader].[SalesPersonID] point to this entity (FK_SalesOrderHeader_SalesPerson_SalesPersonID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_SalesPerson_SalesPersonID
        /// <summary>
        /// Child Sales_SalesPersonQuotaHistories where [SalesPersonQuotaHistory].[BusinessEntityID] point to this entity (FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesPersonQuotaHistory> Sales_SalesPersonQuotaHistories { get; set; } // SalesPersonQuotaHistory.FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID
        /// <summary>
        /// Child Sales_SalesTerritoryHistories where [SalesTerritoryHistory].[BusinessEntityID] point to this entity (FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesTerritoryHistory> Sales_SalesTerritoryHistories { get; set; } // SalesTerritoryHistory.FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID
        /// <summary>
        /// Child Sales_Stores where [Store].[SalesPersonID] point to this entity (FK_Store_SalesPerson_SalesPersonID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_Store> Sales_Stores { get; set; } // Store.FK_Store_SalesPerson_SalesPersonID

        // Foreign keys

        /// <summary>
        /// Parent HumanResources_Employee pointed by [SalesPerson].([BusinessEntityID]) (FK_SalesPerson_Employee_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID"), Required] public virtual HumanResources_Employee HumanResources_Employee { get; set; } // FK_SalesPerson_Employee_BusinessEntityID

        /// <summary>
        /// Parent Sales_SalesTerritory pointed by [SalesPerson].([TerritoryID]) (FK_SalesPerson_SalesTerritory_TerritoryID)
        /// </summary>
        [ForeignKey("TerritoryID")] public virtual Sales_SalesTerritory Sales_SalesTerritory { get; set; } // FK_SalesPerson_SalesTerritory_TerritoryID

        public Sales_SalesPerson()
        {
            Bonus = 0.00m;
            CommissionPct = 0.00m;
            SalesYTD = 0.00m;
            SalesLastYear = 0.00m;
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
            Sales_SalesPersonQuotaHistories = new System.Collections.Generic.List<Sales_SalesPersonQuotaHistory>();
            Sales_SalesTerritoryHistories = new System.Collections.Generic.List<Sales_SalesTerritoryHistory>();
            Sales_Stores = new System.Collections.Generic.List<Sales_Store>();
        }
    }

    // SalesPersonQuotaHistory
    ///<summary>
    /// Sales performance tracking.
    ///</summary>
    [Table("SalesPersonQuotaHistory", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesPersonQuotaHistory
    {

        ///<summary>
        /// Sales person identification number. Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesPersonQuotaHistory_BusinessEntityID_QuotaDate", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Sales quota date.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"QuotaDate", Order = 2, TypeName = "datetime")]
        [Index(@"PK_SalesPersonQuotaHistory_BusinessEntityID_QuotaDate", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [DataType(DataType.DateTime)]
        [Display(Name = "Quota date")]
        public System.DateTime QuotaDate { get; set; } // QuotaDate (Primary key)

        ///<summary>
        /// Sales quota amount.
        ///</summary>
        [Column(@"SalesQuota", Order = 3, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Sales quota")]
        public decimal SalesQuota { get; set; } // SalesQuota

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 4, TypeName = "uniqueidentifier")]
        [Index(@"AK_SalesPersonQuotaHistory_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Sales_SalesPerson pointed by [SalesPersonQuotaHistory].([BusinessEntityID]) (FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID"), Required] public virtual Sales_SalesPerson Sales_SalesPerson { get; set; } // FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID

        public Sales_SalesPersonQuotaHistory()
        {
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesReason
    ///<summary>
    /// Lookup table of customer purchase reasons.
    ///</summary>
    [Table("SalesReason", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesReason
    {

        ///<summary>
        /// Primary key for SalesReason records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"SalesReasonID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesReason_SalesReasonID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Sales reason ID")]
        public int SalesReasonID { get; set; } // SalesReasonID (Primary key)

        ///<summary>
        /// Sales reason description.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Category the sales reason belongs to.
        ///</summary>
        [Column(@"ReasonType", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Reason type")]
        public string ReasonType { get; set; } // ReasonType (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SalesOrderHeaderSalesReasons where [SalesOrderHeaderSalesReason].[SalesReasonID] point to this entity (FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeaderSalesReason> Sales_SalesOrderHeaderSalesReasons { get; set; } // SalesOrderHeaderSalesReason.FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID

        public Sales_SalesReason()
        {
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderHeaderSalesReasons = new System.Collections.Generic.List<Sales_SalesOrderHeaderSalesReason>();
        }
    }

    // SalesTaxRate
    ///<summary>
    /// Tax rate lookup table.
    ///</summary>
    [Table("SalesTaxRate", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesTaxRate
    {

        ///<summary>
        /// Primary key for SalesTaxRate records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"SalesTaxRateID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesTaxRate_SalesTaxRateID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Sales tax rate ID")]
        public int SalesTaxRateID { get; set; } // SalesTaxRateID (Primary key)

        ///<summary>
        /// State, province, or country/region the sales tax applies to.
        ///</summary>
        [Column(@"StateProvinceID", Order = 2, TypeName = "int")]
        [Index(@"AK_SalesTaxRate_StateProvinceID_TaxType", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "State province ID")]
        public int StateProvinceID { get; set; } // StateProvinceID

        ///<summary>
        /// 1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.
        ///</summary>
        [Column(@"TaxType", Order = 3, TypeName = "tinyint")]
        [Index(@"AK_SalesTaxRate_StateProvinceID_TaxType", 2, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Tax type")]
        public byte TaxType { get; set; } // TaxType

        ///<summary>
        /// Tax rate amount.
        ///</summary>
        [Column(@"TaxRate", Order = 4, TypeName = "smallmoney")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Tax rate")]
        public decimal TaxRate { get; set; } // TaxRate

        ///<summary>
        /// Tax rate description.
        ///</summary>
        [Column(@"Name", Order = 5, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 6, TypeName = "uniqueidentifier")]
        [Index(@"AK_SalesTaxRate_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 7, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Person_StateProvince pointed by [SalesTaxRate].([StateProvinceID]) (FK_SalesTaxRate_StateProvince_StateProvinceID)
        /// </summary>
        [ForeignKey("StateProvinceID"), Required] public virtual Person_StateProvince Person_StateProvince { get; set; } // FK_SalesTaxRate_StateProvince_StateProvinceID

        public Sales_SalesTaxRate()
        {
            TaxRate = 0.00m;
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesTerritory
    ///<summary>
    /// Sales territory lookup table.
    ///</summary>
    [Table("SalesTerritory", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesTerritory
    {

        ///<summary>
        /// Primary key for SalesTerritory records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"TerritoryID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesTerritory_TerritoryID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Territory ID")]
        public int TerritoryID { get; set; } // TerritoryID (Primary key)

        ///<summary>
        /// Sales territory description
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_SalesTerritory_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
        ///</summary>
        [Column(@"CountryRegionCode", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "Country region code")]
        public string CountryRegionCode { get; set; } // CountryRegionCode (length: 3)

        ///<summary>
        /// Geographic area to which the sales territory belong.
        ///</summary>
        [Column(@"Group", Order = 4, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Group")]
        public string Group { get; set; } // Group (length: 50)

        ///<summary>
        /// Sales in the territory year to date.
        ///</summary>
        [Column(@"SalesYTD", Order = 5, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Sales ytd")]
        public decimal SalesYTD { get; set; } // SalesYTD

        ///<summary>
        /// Sales in the territory the previous year.
        ///</summary>
        [Column(@"SalesLastYear", Order = 6, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Sales last year")]
        public decimal SalesLastYear { get; set; } // SalesLastYear

        ///<summary>
        /// Business costs in the territory year to date.
        ///</summary>
        [Column(@"CostYTD", Order = 7, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Cost ytd")]
        public decimal CostYTD { get; set; } // CostYTD

        ///<summary>
        /// Business costs in the territory the previous year.
        ///</summary>
        [Column(@"CostLastYear", Order = 8, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Cost last year")]
        public decimal CostLastYear { get; set; } // CostLastYear

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 9, TypeName = "uniqueidentifier")]
        [Index(@"AK_SalesTerritory_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 10, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Person_StateProvinces where [StateProvince].[TerritoryID] point to this entity (FK_StateProvince_SalesTerritory_TerritoryID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_StateProvince> Person_StateProvinces { get; set; } // StateProvince.FK_StateProvince_SalesTerritory_TerritoryID
        /// <summary>
        /// Child Sales_Customers where [Customer].[TerritoryID] point to this entity (FK_Customer_SalesTerritory_TerritoryID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_Customer> Sales_Customers { get; set; } // Customer.FK_Customer_SalesTerritory_TerritoryID
        /// <summary>
        /// Child Sales_SalesOrderHeaders where [SalesOrderHeader].[TerritoryID] point to this entity (FK_SalesOrderHeader_SalesTerritory_TerritoryID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_SalesTerritory_TerritoryID
        /// <summary>
        /// Child Sales_SalesPersons where [SalesPerson].[TerritoryID] point to this entity (FK_SalesPerson_SalesTerritory_TerritoryID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesPerson> Sales_SalesPersons { get; set; } // SalesPerson.FK_SalesPerson_SalesTerritory_TerritoryID
        /// <summary>
        /// Child Sales_SalesTerritoryHistories where [SalesTerritoryHistory].[TerritoryID] point to this entity (FK_SalesTerritoryHistory_SalesTerritory_TerritoryID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesTerritoryHistory> Sales_SalesTerritoryHistories { get; set; } // SalesTerritoryHistory.FK_SalesTerritoryHistory_SalesTerritory_TerritoryID

        // Foreign keys

        /// <summary>
        /// Parent Person_CountryRegion pointed by [SalesTerritory].([CountryRegionCode]) (FK_SalesTerritory_CountryRegion_CountryRegionCode)
        /// </summary>
        [ForeignKey("CountryRegionCode"), Required] public virtual Person_CountryRegion Person_CountryRegion { get; set; } // FK_SalesTerritory_CountryRegion_CountryRegionCode

        public Sales_SalesTerritory()
        {
            SalesYTD = 0.00m;
            SalesLastYear = 0.00m;
            CostYTD = 0.00m;
            CostLastYear = 0.00m;
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_Customers = new System.Collections.Generic.List<Sales_Customer>();
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
            Sales_SalesPersons = new System.Collections.Generic.List<Sales_SalesPerson>();
            Sales_SalesTerritoryHistories = new System.Collections.Generic.List<Sales_SalesTerritoryHistory>();
            Person_StateProvinces = new System.Collections.Generic.List<Person_StateProvince>();
        }
    }

    // SalesTerritoryHistory
    ///<summary>
    /// Sales representative transfers to other sales territories.
    ///</summary>
    [Table("SalesTerritoryHistory", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesTerritoryHistory
    {

        ///<summary>
        /// Primary key. The sales rep.  Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesTerritoryHistory_BusinessEntityID_StartDate_TerritoryID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"TerritoryID", Order = 2, TypeName = "int")]
        [Index(@"PK_SalesTerritoryHistory_BusinessEntityID_StartDate_TerritoryID", 3, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Territory ID")]
        public int TerritoryID { get; set; } // TerritoryID (Primary key)

        ///<summary>
        /// Primary key. Date the sales representive started work in the territory.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StartDate", Order = 3, TypeName = "datetime")]
        [Index(@"PK_SalesTerritoryHistory_BusinessEntityID_StartDate_TerritoryID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [DataType(DataType.DateTime)]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)

        ///<summary>
        /// Date the sales representative left work in the territory.
        ///</summary>
        [Column(@"EndDate", Order = 4, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "End date")]
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 5, TypeName = "uniqueidentifier")]
        [Index(@"AK_SalesTerritoryHistory_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Sales_SalesPerson pointed by [SalesTerritoryHistory].([BusinessEntityID]) (FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID"), Required] public virtual Sales_SalesPerson Sales_SalesPerson { get; set; } // FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID

        /// <summary>
        /// Parent Sales_SalesTerritory pointed by [SalesTerritoryHistory].([TerritoryID]) (FK_SalesTerritoryHistory_SalesTerritory_TerritoryID)
        /// </summary>
        [ForeignKey("TerritoryID"), Required] public virtual Sales_SalesTerritory Sales_SalesTerritory { get; set; } // FK_SalesTerritoryHistory_SalesTerritory_TerritoryID

        public Sales_SalesTerritoryHistory()
        {
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ShoppingCartItem
    ///<summary>
    /// Contains online customer orders until the order is submitted or cancelled.
    ///</summary>
    [Table("ShoppingCartItem", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_ShoppingCartItem
    {

        ///<summary>
        /// Primary key for ShoppingCartItem records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ShoppingCartItemID", Order = 1, TypeName = "int")]
        [Index(@"PK_ShoppingCartItem_ShoppingCartItemID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Shopping cart item ID")]
        public int ShoppingCartItemID { get; set; } // ShoppingCartItemID (Primary key)

        ///<summary>
        /// Shopping cart identification number.
        ///</summary>
        [Column(@"ShoppingCartID", Order = 2, TypeName = "nvarchar")]
        [Index(@"IX_ShoppingCartItem_ShoppingCartID_ProductID", 1, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Shopping cart ID")]
        public string ShoppingCartID { get; set; } // ShoppingCartID (length: 50)

        ///<summary>
        /// Product quantity ordered.
        ///</summary>
        [Column(@"Quantity", Order = 3, TypeName = "int")]
        [Required]
        [Display(Name = "Quantity")]
        public int Quantity { get; set; } // Quantity

        ///<summary>
        /// Product ordered. Foreign key to Product.ProductID.
        ///</summary>
        [Column(@"ProductID", Order = 4, TypeName = "int")]
        [Index(@"IX_ShoppingCartItem_ShoppingCartID_ProductID", 2, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Product ID")]
        public int ProductID { get; set; } // ProductID

        ///<summary>
        /// Date the time the record was created.
        ///</summary>
        [Column(@"DateCreated", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Date created")]
        public System.DateTime DateCreated { get; set; } // DateCreated

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Production_Product pointed by [ShoppingCartItem].([ProductID]) (FK_ShoppingCartItem_Product_ProductID)
        /// </summary>
        [ForeignKey("ProductID"), Required] public virtual Production_Product Production_Product { get; set; } // FK_ShoppingCartItem_Product_ProductID

        public Sales_ShoppingCartItem()
        {
            Quantity = 1;
            DateCreated = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SpecialOffer
    ///<summary>
    /// Sale discounts lookup table.
    ///</summary>
    [Table("SpecialOffer", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SpecialOffer
    {

        ///<summary>
        /// Primary key for SpecialOffer records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"SpecialOfferID", Order = 1, TypeName = "int")]
        [Index(@"PK_SpecialOffer_SpecialOfferID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Special offer ID")]
        public int SpecialOfferID { get; set; } // SpecialOfferID (Primary key)

        ///<summary>
        /// Discount description.
        ///</summary>
        [Column(@"Description", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(255)]
        [StringLength(255)]
        [Display(Name = "Description")]
        public string Description { get; set; } // Description (length: 255)

        ///<summary>
        /// Discount precentage.
        ///</summary>
        [Column(@"DiscountPct", Order = 3, TypeName = "smallmoney")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Discount pct")]
        public decimal DiscountPct { get; set; } // DiscountPct

        ///<summary>
        /// Discount type category.
        ///</summary>
        [Column(@"Type", Order = 4, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Type")]
        public string Type { get; set; } // Type (length: 50)

        ///<summary>
        /// Group the discount applies to such as Reseller or Customer.
        ///</summary>
        [Column(@"Category", Order = 5, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Category")]
        public string Category { get; set; } // Category (length: 50)

        ///<summary>
        /// Discount start date.
        ///</summary>
        [Column(@"StartDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // StartDate

        ///<summary>
        /// Discount end date.
        ///</summary>
        [Column(@"EndDate", Order = 7, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "End date")]
        public System.DateTime EndDate { get; set; } // EndDate

        ///<summary>
        /// Minimum discount percent allowed.
        ///</summary>
        [Column(@"MinQty", Order = 8, TypeName = "int")]
        [Required]
        [Display(Name = "Min qty")]
        public int MinQty { get; set; } // MinQty

        ///<summary>
        /// Maximum discount percent allowed.
        ///</summary>
        [Column(@"MaxQty", Order = 9, TypeName = "int")]
        [Display(Name = "Max qty")]
        public int? MaxQty { get; set; } // MaxQty

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 10, TypeName = "uniqueidentifier")]
        [Index(@"AK_SpecialOffer_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 11, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SpecialOfferProducts where [SpecialOfferProduct].[SpecialOfferID] point to this entity (FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SpecialOfferProduct> Sales_SpecialOfferProducts { get; set; } // SpecialOfferProduct.FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID

        public Sales_SpecialOffer()
        {
            DiscountPct = 0.00m;
            MinQty = 0;
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SpecialOfferProducts = new System.Collections.Generic.List<Sales_SpecialOfferProduct>();
        }
    }

    // SpecialOfferProduct
    ///<summary>
    /// Cross-reference table mapping products to special offer discounts.
    ///</summary>
    [Table("SpecialOfferProduct", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SpecialOfferProduct
    {

        ///<summary>
        /// Primary key for SpecialOfferProduct records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"SpecialOfferID", Order = 1, TypeName = "int")]
        [Index(@"PK_SpecialOfferProduct_SpecialOfferID_ProductID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Special offer ID")]
        public int SpecialOfferID { get; set; } // SpecialOfferID (Primary key)

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductID", Order = 2, TypeName = "int")]
        [Index(@"IX_SpecialOfferProduct_ProductID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_SpecialOfferProduct_SpecialOfferID_ProductID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product ID")]
        public int ProductID { get; set; } // ProductID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 3, TypeName = "uniqueidentifier")]
        [Index(@"AK_SpecialOfferProduct_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SalesOrderDetails where [SalesOrderDetail].([ProductID], [SpecialOfferID]) point to this entity (FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderDetail> Sales_SalesOrderDetails { get; set; } // SalesOrderDetail.FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID

        // Foreign keys

        /// <summary>
        /// Parent Production_Product pointed by [SpecialOfferProduct].([ProductID]) (FK_SpecialOfferProduct_Product_ProductID)
        /// </summary>
        [ForeignKey("ProductID"), Required] public virtual Production_Product Production_Product { get; set; } // FK_SpecialOfferProduct_Product_ProductID

        /// <summary>
        /// Parent Sales_SpecialOffer pointed by [SpecialOfferProduct].([SpecialOfferID]) (FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID)
        /// </summary>
        [ForeignKey("SpecialOfferID"), Required] public virtual Sales_SpecialOffer Sales_SpecialOffer { get; set; } // FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID

        public Sales_SpecialOfferProduct()
        {
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderDetails = new System.Collections.Generic.List<Sales_SalesOrderDetail>();
        }
    }

    // Store
    ///<summary>
    /// Customers (resellers) of Adventure Works products.
    ///</summary>
    [Table("Store", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_Store
    {

        ///<summary>
        /// Primary key. Foreign key to Customer.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_Store_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        [ForeignKey("Person_BusinessEntity")]
        public int BusinessEntityID { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Name of the store.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ID of the sales person assigned to the customer. Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        [Column(@"SalesPersonID", Order = 3, TypeName = "int")]
        [Index(@"IX_Store_SalesPersonID", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Sales person ID")]
        public int? SalesPersonID { get; set; } // SalesPersonID

        ///<summary>
        /// Demographic informationg about the store such as the number of employees, annual sales and store type.
        ///</summary>
        [Column(@"Demographics", Order = 4, TypeName = "xml")]
        [Display(Name = "Demographics")]
        public string Demographics { get; set; } // Demographics

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 5, TypeName = "uniqueidentifier")]
        [Index(@"AK_Store_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_Customers where [Customer].[StoreID] point to this entity (FK_Customer_Store_StoreID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_Customer> Sales_Customers { get; set; } // Customer.FK_Customer_Store_StoreID

        // Foreign keys

        /// <summary>
        /// Parent Person_BusinessEntity pointed by [Store].([BusinessEntityID]) (FK_Store_BusinessEntity_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityID"), Required] public virtual Person_BusinessEntity Person_BusinessEntity { get; set; } // FK_Store_BusinessEntity_BusinessEntityID

        /// <summary>
        /// Parent Sales_SalesPerson pointed by [Store].([SalesPersonID]) (FK_Store_SalesPerson_SalesPersonID)
        /// </summary>
        [ForeignKey("SalesPersonID")] public virtual Sales_SalesPerson Sales_SalesPerson { get; set; } // FK_Store_SalesPerson_SalesPersonID

        public Sales_Store()
        {
            rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_Customers = new System.Collections.Generic.List<Sales_Customer>();
        }
    }

    #endregion

    #region POCO Configuration

    // AWBuildVersion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class AWBuildVersionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AWBuildVersion>
    {
        public AWBuildVersionConfiguration()
            : this("dbo")
        {
        }

        public AWBuildVersionConfiguration(string schema)
        {
        }
    }

    // DatabaseLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DatabaseLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DatabaseLog>
    {
        public DatabaseLogConfiguration()
            : this("dbo")
        {
        }

        public DatabaseLogConfiguration(string schema)
        {
            Property(x => x.Schema).IsOptional();
            Property(x => x.Object).IsOptional();
        }
    }

    // ErrorLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ErrorLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ErrorLog>
    {
        public ErrorLogConfiguration()
            : this("dbo")
        {
        }

        public ErrorLogConfiguration(string schema)
        {
            Property(x => x.ErrorSeverity).IsOptional();
            Property(x => x.ErrorState).IsOptional();
            Property(x => x.ErrorProcedure).IsOptional();
            Property(x => x.ErrorLine).IsOptional();
        }
    }

    // Department
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class HumanResources_DepartmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_Department>
    {
        public HumanResources_DepartmentConfiguration()
            : this("HumanResources")
        {
        }

        public HumanResources_DepartmentConfiguration(string schema)
        {
        }
    }

    // Employee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class HumanResources_EmployeeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_Employee>
    {
        public HumanResources_EmployeeConfiguration()
            : this("HumanResources")
        {
        }

        public HumanResources_EmployeeConfiguration(string schema)
        {
            Property(x => x.OrganizationNode).IsOptional();
            Property(x => x.OrganizationLevel).IsOptional();
            Property(x => x.MaritalStatus).IsFixedLength();
            Property(x => x.Gender).IsFixedLength();

        }
    }

    // EmployeeDepartmentHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class HumanResources_EmployeeDepartmentHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_EmployeeDepartmentHistory>
    {
        public HumanResources_EmployeeDepartmentHistoryConfiguration()
            : this("HumanResources")
        {
        }

        public HumanResources_EmployeeDepartmentHistoryConfiguration(string schema)
        {
            Property(x => x.EndDate).IsOptional();

        }
    }

    // EmployeePayHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class HumanResources_EmployeePayHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_EmployeePayHistory>
    {
        public HumanResources_EmployeePayHistoryConfiguration()
            : this("HumanResources")
        {
        }

        public HumanResources_EmployeePayHistoryConfiguration(string schema)
        {
            Property(x => x.Rate).HasPrecision(19,4);

        }
    }

    // JobCandidate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class HumanResources_JobCandidateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_JobCandidate>
    {
        public HumanResources_JobCandidateConfiguration()
            : this("HumanResources")
        {
        }

        public HumanResources_JobCandidateConfiguration(string schema)
        {
            Property(x => x.BusinessEntityID).IsOptional();
            Property(x => x.Resume).IsOptional();

        }
    }

    // Shift
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class HumanResources_ShiftConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_Shift>
    {
        public HumanResources_ShiftConfiguration()
            : this("HumanResources")
        {
        }

        public HumanResources_ShiftConfiguration(string schema)
        {
        }
    }

    // Address
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_AddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_Address>
    {
        public Person_AddressConfiguration()
            : this("Person")
        {
        }

        public Person_AddressConfiguration(string schema)
        {
            Property(x => x.AddressLine2).IsOptional();
            Property(x => x.SpatialLocation).IsOptional();

        }
    }

    // AddressType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_AddressTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_AddressType>
    {
        public Person_AddressTypeConfiguration()
            : this("Person")
        {
        }

        public Person_AddressTypeConfiguration(string schema)
        {
        }
    }

    // BusinessEntity
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_BusinessEntityConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_BusinessEntity>
    {
        public Person_BusinessEntityConfiguration()
            : this("Person")
        {
        }

        public Person_BusinessEntityConfiguration(string schema)
        {
        }
    }

    // BusinessEntityAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_BusinessEntityAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_BusinessEntityAddress>
    {
        public Person_BusinessEntityAddressConfiguration()
            : this("Person")
        {
        }

        public Person_BusinessEntityAddressConfiguration(string schema)
        {

        }
    }

    // BusinessEntityContact
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_BusinessEntityContactConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_BusinessEntityContact>
    {
        public Person_BusinessEntityContactConfiguration()
            : this("Person")
        {
        }

        public Person_BusinessEntityContactConfiguration(string schema)
        {

        }
    }

    // ContactType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_ContactTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_ContactType>
    {
        public Person_ContactTypeConfiguration()
            : this("Person")
        {
        }

        public Person_ContactTypeConfiguration(string schema)
        {
        }
    }

    // CountryRegion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_CountryRegionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_CountryRegion>
    {
        public Person_CountryRegionConfiguration()
            : this("Person")
        {
        }

        public Person_CountryRegionConfiguration(string schema)
        {
        }
    }

    // EmailAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_EmailAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_EmailAddress>
    {
        public Person_EmailAddressConfiguration()
            : this("Person")
        {
        }

        public Person_EmailAddressConfiguration(string schema)
        {
            Property(x => x.EmailAddress).IsOptional();

        }
    }

    // Password
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_PasswordConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_Password>
    {
        public Person_PasswordConfiguration()
            : this("Person")
        {
        }

        public Person_PasswordConfiguration(string schema)
        {
            Property(x => x.PasswordHash).IsUnicode(false);
            Property(x => x.PasswordSalt).IsUnicode(false);

        }
    }

    // Person
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_PersonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_Person>
    {
        public Person_PersonConfiguration()
            : this("Person")
        {
        }

        public Person_PersonConfiguration(string schema)
        {
            Property(x => x.PersonType).IsFixedLength();
            Property(x => x.Title).IsOptional();
            Property(x => x.MiddleName).IsOptional();
            Property(x => x.Suffix).IsOptional();
            Property(x => x.AdditionalContactInfo).IsOptional();
            Property(x => x.Demographics).IsOptional();

        }
    }

    // PersonPhone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_PersonPhoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_PersonPhone>
    {
        public Person_PersonPhoneConfiguration()
            : this("Person")
        {
        }

        public Person_PersonPhoneConfiguration(string schema)
        {

        }
    }

    // PhoneNumberType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_PhoneNumberTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_PhoneNumberType>
    {
        public Person_PhoneNumberTypeConfiguration()
            : this("Person")
        {
        }

        public Person_PhoneNumberTypeConfiguration(string schema)
        {
        }
    }

    // StateProvince
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Person_StateProvinceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_StateProvince>
    {
        public Person_StateProvinceConfiguration()
            : this("Person")
        {
        }

        public Person_StateProvinceConfiguration(string schema)
        {
            Property(x => x.StateProvinceCode).IsFixedLength();

        }
    }

    // BillOfMaterials
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_BillOfMaterialConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_BillOfMaterial>
    {
        public Production_BillOfMaterialConfiguration()
            : this("Production")
        {
        }

        public Production_BillOfMaterialConfiguration(string schema)
        {
            Property(x => x.ProductAssemblyID).IsOptional();
            Property(x => x.EndDate).IsOptional();
            Property(x => x.UnitMeasureCode).IsFixedLength();
            Property(x => x.PerAssemblyQty).HasPrecision(8,2);

        }
    }

    // Culture
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_CultureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_Culture>
    {
        public Production_CultureConfiguration()
            : this("Production")
        {
        }

        public Production_CultureConfiguration(string schema)
        {
            Property(x => x.CultureID).IsFixedLength();
        }
    }

    // Document
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_DocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_Document>
    {
        public Production_DocumentConfiguration()
            : this("Production")
        {
        }

        public Production_DocumentConfiguration(string schema)
        {
            Property(x => x.DocumentLevel).IsOptional();
            Property(x => x.Revision).IsFixedLength();
            Property(x => x.DocumentSummary).IsOptional();
            Property(x => x.Document).IsOptional();

        }
    }

    // Illustration
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_IllustrationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_Illustration>
    {
        public Production_IllustrationConfiguration()
            : this("Production")
        {
        }

        public Production_IllustrationConfiguration(string schema)
        {
            Property(x => x.Diagram).IsOptional();
        }
    }

    // Location
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_LocationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_Location>
    {
        public Production_LocationConfiguration()
            : this("Production")
        {
        }

        public Production_LocationConfiguration(string schema)
        {
            Property(x => x.CostRate).HasPrecision(10,4);
            Property(x => x.Availability).HasPrecision(8,2);
        }
    }

    // Product
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_Product>
    {
        public Production_ProductConfiguration()
            : this("Production")
        {
        }

        public Production_ProductConfiguration(string schema)
        {
            Property(x => x.Color).IsOptional();
            Property(x => x.StandardCost).HasPrecision(19,4);
            Property(x => x.ListPrice).HasPrecision(19,4);
            Property(x => x.Size).IsOptional();
            Property(x => x.SizeUnitMeasureCode).IsOptional().IsFixedLength();
            Property(x => x.WeightUnitMeasureCode).IsOptional().IsFixedLength();
            Property(x => x.Weight).IsOptional().HasPrecision(8,2);
            Property(x => x.ProductLine).IsOptional().IsFixedLength();
            Property(x => x.Class).IsOptional().IsFixedLength();
            Property(x => x.Style).IsOptional().IsFixedLength();
            Property(x => x.ProductSubcategoryID).IsOptional();
            Property(x => x.ProductModelID).IsOptional();
            Property(x => x.SellEndDate).IsOptional();
            Property(x => x.DiscontinuedDate).IsOptional();

        }
    }

    // ProductCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductCategory>
    {
        public Production_ProductCategoryConfiguration()
            : this("Production")
        {
        }

        public Production_ProductCategoryConfiguration(string schema)
        {
        }
    }

    // ProductCostHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductCostHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductCostHistory>
    {
        public Production_ProductCostHistoryConfiguration()
            : this("Production")
        {
        }

        public Production_ProductCostHistoryConfiguration(string schema)
        {
            Property(x => x.EndDate).IsOptional();
            Property(x => x.StandardCost).HasPrecision(19,4);

        }
    }

    // ProductDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductDescriptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductDescription>
    {
        public Production_ProductDescriptionConfiguration()
            : this("Production")
        {
        }

        public Production_ProductDescriptionConfiguration(string schema)
        {
        }
    }

    // ProductDocument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductDocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductDocument>
    {
        public Production_ProductDocumentConfiguration()
            : this("Production")
        {
        }

        public Production_ProductDocumentConfiguration(string schema)
        {

        }
    }

    // ProductInventory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductInventoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductInventory>
    {
        public Production_ProductInventoryConfiguration()
            : this("Production")
        {
        }

        public Production_ProductInventoryConfiguration(string schema)
        {

        }
    }

    // ProductListPriceHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductListPriceHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductListPriceHistory>
    {
        public Production_ProductListPriceHistoryConfiguration()
            : this("Production")
        {
        }

        public Production_ProductListPriceHistoryConfiguration(string schema)
        {
            Property(x => x.EndDate).IsOptional();
            Property(x => x.ListPrice).HasPrecision(19,4);

        }
    }

    // ProductModel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductModelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductModel>
    {
        public Production_ProductModelConfiguration()
            : this("Production")
        {
        }

        public Production_ProductModelConfiguration(string schema)
        {
            Property(x => x.CatalogDescription).IsOptional();
            Property(x => x.Instructions).IsOptional();
        }
    }

    // ProductModelIllustration
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductModelIllustrationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductModelIllustration>
    {
        public Production_ProductModelIllustrationConfiguration()
            : this("Production")
        {
        }

        public Production_ProductModelIllustrationConfiguration(string schema)
        {

        }
    }

    // ProductModelProductDescriptionCulture
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductModelProductDescriptionCultureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductModelProductDescriptionCulture>
    {
        public Production_ProductModelProductDescriptionCultureConfiguration()
            : this("Production")
        {
        }

        public Production_ProductModelProductDescriptionCultureConfiguration(string schema)
        {
            Property(x => x.CultureID).IsFixedLength();

        }
    }

    // ProductPhoto
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductPhotoConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductPhoto>
    {
        public Production_ProductPhotoConfiguration()
            : this("Production")
        {
        }

        public Production_ProductPhotoConfiguration(string schema)
        {
            Property(x => x.ThumbNailPhoto).IsOptional();
            Property(x => x.ThumbnailPhotoFileName).IsOptional();
            Property(x => x.LargePhoto).IsOptional();
            Property(x => x.LargePhotoFileName).IsOptional();
        }
    }

    // ProductProductPhoto
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductProductPhotoConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductProductPhoto>
    {
        public Production_ProductProductPhotoConfiguration()
            : this("Production")
        {
        }

        public Production_ProductProductPhotoConfiguration(string schema)
        {

        }
    }

    // ProductReview
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductReviewConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductReview>
    {
        public Production_ProductReviewConfiguration()
            : this("Production")
        {
        }

        public Production_ProductReviewConfiguration(string schema)
        {
            Property(x => x.Comments).IsOptional();

        }
    }

    // ProductSubcategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ProductSubcategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductSubcategory>
    {
        public Production_ProductSubcategoryConfiguration()
            : this("Production")
        {
        }

        public Production_ProductSubcategoryConfiguration(string schema)
        {

        }
    }

    // ScrapReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_ScrapReasonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ScrapReason>
    {
        public Production_ScrapReasonConfiguration()
            : this("Production")
        {
        }

        public Production_ScrapReasonConfiguration(string schema)
        {
        }
    }

    // TransactionHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_TransactionHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_TransactionHistory>
    {
        public Production_TransactionHistoryConfiguration()
            : this("Production")
        {
        }

        public Production_TransactionHistoryConfiguration(string schema)
        {
            Property(x => x.TransactionType).IsFixedLength();
            Property(x => x.ActualCost).HasPrecision(19,4);

        }
    }

    // TransactionHistoryArchive
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_TransactionHistoryArchiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_TransactionHistoryArchive>
    {
        public Production_TransactionHistoryArchiveConfiguration()
            : this("Production")
        {
        }

        public Production_TransactionHistoryArchiveConfiguration(string schema)
        {
            Property(x => x.TransactionType).IsFixedLength();
            Property(x => x.ActualCost).HasPrecision(19,4);
        }
    }

    // UnitMeasure
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_UnitMeasureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_UnitMeasure>
    {
        public Production_UnitMeasureConfiguration()
            : this("Production")
        {
        }

        public Production_UnitMeasureConfiguration(string schema)
        {
            Property(x => x.UnitMeasureCode).IsFixedLength();
        }
    }

    // WorkOrder
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_WorkOrderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_WorkOrder>
    {
        public Production_WorkOrderConfiguration()
            : this("Production")
        {
        }

        public Production_WorkOrderConfiguration(string schema)
        {
            Property(x => x.EndDate).IsOptional();
            Property(x => x.ScrapReasonID).IsOptional();

        }
    }

    // WorkOrderRouting
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_WorkOrderRoutingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_WorkOrderRouting>
    {
        public Production_WorkOrderRoutingConfiguration()
            : this("Production")
        {
        }

        public Production_WorkOrderRoutingConfiguration(string schema)
        {
            Property(x => x.ActualStartDate).IsOptional();
            Property(x => x.ActualEndDate).IsOptional();
            Property(x => x.ActualResourceHrs).IsOptional().HasPrecision(9,4);
            Property(x => x.PlannedCost).HasPrecision(19,4);
            Property(x => x.ActualCost).IsOptional().HasPrecision(19,4);

        }
    }

    // ProductVendor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Purchasing_ProductVendorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_ProductVendor>
    {
        public Purchasing_ProductVendorConfiguration()
            : this("Purchasing")
        {
        }

        public Purchasing_ProductVendorConfiguration(string schema)
        {
            Property(x => x.StandardPrice).HasPrecision(19,4);
            Property(x => x.LastReceiptCost).IsOptional().HasPrecision(19,4);
            Property(x => x.LastReceiptDate).IsOptional();
            Property(x => x.OnOrderQty).IsOptional();
            Property(x => x.UnitMeasureCode).IsFixedLength();

        }
    }

    // PurchaseOrderDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Purchasing_PurchaseOrderDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_PurchaseOrderDetail>
    {
        public Purchasing_PurchaseOrderDetailConfiguration()
            : this("Purchasing")
        {
        }

        public Purchasing_PurchaseOrderDetailConfiguration(string schema)
        {
            Property(x => x.UnitPrice).HasPrecision(19,4);
            Property(x => x.LineTotal).HasPrecision(19,4);
            Property(x => x.ReceivedQty).HasPrecision(8,2);
            Property(x => x.RejectedQty).HasPrecision(8,2);
            Property(x => x.StockedQty).HasPrecision(9,2);

        }
    }

    // PurchaseOrderHeader
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Purchasing_PurchaseOrderHeaderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_PurchaseOrderHeader>
    {
        public Purchasing_PurchaseOrderHeaderConfiguration()
            : this("Purchasing")
        {
        }

        public Purchasing_PurchaseOrderHeaderConfiguration(string schema)
        {
            Property(x => x.ShipDate).IsOptional();
            Property(x => x.SubTotal).HasPrecision(19,4);
            Property(x => x.TaxAmt).HasPrecision(19,4);
            Property(x => x.Freight).HasPrecision(19,4);
            Property(x => x.TotalDue).HasPrecision(19,4);

        }
    }

    // ShipMethod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Purchasing_ShipMethodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_ShipMethod>
    {
        public Purchasing_ShipMethodConfiguration()
            : this("Purchasing")
        {
        }

        public Purchasing_ShipMethodConfiguration(string schema)
        {
            Property(x => x.ShipBase).HasPrecision(19,4);
            Property(x => x.ShipRate).HasPrecision(19,4);
        }
    }

    // Vendor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Purchasing_VendorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_Vendor>
    {
        public Purchasing_VendorConfiguration()
            : this("Purchasing")
        {
        }

        public Purchasing_VendorConfiguration(string schema)
        {
            Property(x => x.PurchasingWebServiceURL).IsOptional();

        }
    }

    // CountryRegionCurrency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_CountryRegionCurrencyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_CountryRegionCurrency>
    {
        public Sales_CountryRegionCurrencyConfiguration()
            : this("Sales")
        {
        }

        public Sales_CountryRegionCurrencyConfiguration(string schema)
        {
            Property(x => x.CurrencyCode).IsFixedLength();

        }
    }

    // CreditCard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_CreditCardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_CreditCard>
    {
        public Sales_CreditCardConfiguration()
            : this("Sales")
        {
        }

        public Sales_CreditCardConfiguration(string schema)
        {
        }
    }

    // Currency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_CurrencyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_Currency>
    {
        public Sales_CurrencyConfiguration()
            : this("Sales")
        {
        }

        public Sales_CurrencyConfiguration(string schema)
        {
            Property(x => x.CurrencyCode).IsFixedLength();
        }
    }

    // CurrencyRate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_CurrencyRateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_CurrencyRate>
    {
        public Sales_CurrencyRateConfiguration()
            : this("Sales")
        {
        }

        public Sales_CurrencyRateConfiguration(string schema)
        {
            Property(x => x.FromCurrencyCode).IsFixedLength();
            Property(x => x.ToCurrencyCode).IsFixedLength();
            Property(x => x.AverageRate).HasPrecision(19,4);
            Property(x => x.EndOfDayRate).HasPrecision(19,4);

        }
    }

    // Customer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_CustomerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_Customer>
    {
        public Sales_CustomerConfiguration()
            : this("Sales")
        {
        }

        public Sales_CustomerConfiguration(string schema)
        {
            Property(x => x.PersonID).IsOptional();
            Property(x => x.StoreID).IsOptional();
            Property(x => x.TerritoryID).IsOptional();
            Property(x => x.AccountNumber).IsUnicode(false);

        }
    }

    // PersonCreditCard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_PersonCreditCardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_PersonCreditCard>
    {
        public Sales_PersonCreditCardConfiguration()
            : this("Sales")
        {
        }

        public Sales_PersonCreditCardConfiguration(string schema)
        {

        }
    }

    // SalesOrderDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesOrderDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesOrderDetail>
    {
        public Sales_SalesOrderDetailConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesOrderDetailConfiguration(string schema)
        {
            Property(x => x.CarrierTrackingNumber).IsOptional();
            Property(x => x.UnitPrice).HasPrecision(19,4);
            Property(x => x.UnitPriceDiscount).HasPrecision(19,4);
            Property(x => x.LineTotal).HasPrecision(38,6);

        }
    }

    // SalesOrderHeader
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesOrderHeaderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesOrderHeader>
    {
        public Sales_SalesOrderHeaderConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesOrderHeaderConfiguration(string schema)
        {
            Property(x => x.ShipDate).IsOptional();
            Property(x => x.PurchaseOrderNumber).IsOptional();
            Property(x => x.AccountNumber).IsOptional();
            Property(x => x.SalesPersonID).IsOptional();
            Property(x => x.TerritoryID).IsOptional();
            Property(x => x.CreditCardID).IsOptional();
            Property(x => x.CreditCardApprovalCode).IsOptional().IsUnicode(false);
            Property(x => x.CurrencyRateID).IsOptional();
            Property(x => x.SubTotal).HasPrecision(19,4);
            Property(x => x.TaxAmt).HasPrecision(19,4);
            Property(x => x.Freight).HasPrecision(19,4);
            Property(x => x.TotalDue).HasPrecision(19,4);
            Property(x => x.Comment).IsOptional();

        }
    }

    // SalesOrderHeaderSalesReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesOrderHeaderSalesReasonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesOrderHeaderSalesReason>
    {
        public Sales_SalesOrderHeaderSalesReasonConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesOrderHeaderSalesReasonConfiguration(string schema)
        {

        }
    }

    // SalesPerson
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesPersonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesPerson>
    {
        public Sales_SalesPersonConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesPersonConfiguration(string schema)
        {
            Property(x => x.TerritoryID).IsOptional();
            Property(x => x.SalesQuota).IsOptional().HasPrecision(19,4);
            Property(x => x.Bonus).HasPrecision(19,4);
            Property(x => x.CommissionPct).HasPrecision(10,4);
            Property(x => x.SalesYTD).HasPrecision(19,4);
            Property(x => x.SalesLastYear).HasPrecision(19,4);

        }
    }

    // SalesPersonQuotaHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesPersonQuotaHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesPersonQuotaHistory>
    {
        public Sales_SalesPersonQuotaHistoryConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesPersonQuotaHistoryConfiguration(string schema)
        {
            Property(x => x.SalesQuota).HasPrecision(19,4);

        }
    }

    // SalesReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesReasonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesReason>
    {
        public Sales_SalesReasonConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesReasonConfiguration(string schema)
        {
        }
    }

    // SalesTaxRate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesTaxRateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesTaxRate>
    {
        public Sales_SalesTaxRateConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesTaxRateConfiguration(string schema)
        {
            Property(x => x.TaxRate).HasPrecision(10,4);

        }
    }

    // SalesTerritory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesTerritoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesTerritory>
    {
        public Sales_SalesTerritoryConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesTerritoryConfiguration(string schema)
        {
            Property(x => x.SalesYTD).HasPrecision(19,4);
            Property(x => x.SalesLastYear).HasPrecision(19,4);
            Property(x => x.CostYTD).HasPrecision(19,4);
            Property(x => x.CostLastYear).HasPrecision(19,4);

        }
    }

    // SalesTerritoryHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesTerritoryHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesTerritoryHistory>
    {
        public Sales_SalesTerritoryHistoryConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesTerritoryHistoryConfiguration(string schema)
        {
            Property(x => x.EndDate).IsOptional();

        }
    }

    // ShoppingCartItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_ShoppingCartItemConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_ShoppingCartItem>
    {
        public Sales_ShoppingCartItemConfiguration()
            : this("Sales")
        {
        }

        public Sales_ShoppingCartItemConfiguration(string schema)
        {

        }
    }

    // SpecialOffer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SpecialOfferConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SpecialOffer>
    {
        public Sales_SpecialOfferConfiguration()
            : this("Sales")
        {
        }

        public Sales_SpecialOfferConfiguration(string schema)
        {
            Property(x => x.DiscountPct).HasPrecision(10,4);
            Property(x => x.MaxQty).IsOptional();
        }
    }

    // SpecialOfferProduct
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SpecialOfferProductConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SpecialOfferProduct>
    {
        public Sales_SpecialOfferProductConfiguration()
            : this("Sales")
        {
        }

        public Sales_SpecialOfferProductConfiguration(string schema)
        {

        }
    }

    // Store
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_StoreConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_Store>
    {
        public Sales_StoreConfiguration()
            : this("Sales")
        {
        }

        public Sales_StoreConfiguration(string schema)
        {
            Property(x => x.SalesPersonID).IsOptional();
            Property(x => x.Demographics).IsOptional();

        }
    }

    #endregion

}
// </auto-generated>

